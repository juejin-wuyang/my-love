[
  {
    "title": "画布 1",
    "topic": {
      "title": "Spring",
      "topics": [
        {
          "title": "AspectJ",
          "topics": [
            {
              "title": "注意点",
              "topics": [
                {
                  "title": "spring不能async ,transaction 不能使用同类调用"
                },
                {
                  "title": "cglib在创建代理类的时候, 其他类Autowired获取到的类为代理类, 实际的方法调用外部嵌套了 代理逻辑
如果在类内部调用,实际的 this指针,不能指向代理类, 而是指向的目标类, 所以是没有代理逻辑的,而 async和
transaction不能生效"
                },
                {
                  "title": " @Async所修饰的函数不要定义为static类型，这样异步调用不会生效"
                }
              ]
            },
            {
              "title": "表达式定义",
              "topics": [
                {
                  "title": "execution（） 表达式的主体；"
                },
                {
                  "title": " @Async所修饰的函数不要定义为static类型，这样异步调用不会生效"
                },
                {
                  "title": "第一个”*“符号 表示返回值的类型任意；"
                },
                {
                  "title": "com.sample.service.impl	AOP所切的服务的包名，即，我们的业务部分"
                },
                {
                  "title": "包名后面的”..“	表示当前包及子包"
                },
                {
                  "title": "第二个”*“	表示类名，*即所有类。此处可以自定义，下文有举例"
                },
                {
                  "title": ".*(..)	表示任何方法名，括号表示参数，两个点表示任何参数类型"
                }
              ]
            },
            {
              "title": "aspectj 切入点",
              "topics": [
                {
                  "title": "AspectJ提供了一些特殊的切入点来捕获类和对象的构造过程中的连接点。主要有:

捕获构造方法的调用（用call(Signature)切入点，带有额外的new关键字作为签名的一部分)
捕获构造方法的执行（用execution(Signature)切入点，带有额外的new关键字作为签名的一部分）
捕获对象初始化（用initialization(Signature)切入点）
捕获对象预先初始化（用preinitialization(Signature)切入点）
捕获类的初始化（用staticinitialization(TypePattern)切入点）"
                },
                {
                  "title": "如果切面定义源文件不在本模块中，所以需要用 <aspectLibraries> 配置来指定切面定义提供者模块"
                },
                {
                  "title": "即使使用反射创建一个类的实例也能被正确的织入"
                }
              ]
            },
            {
              "title": "日志切面实现",
              "topics": [
                {
                  "title": "异步场景中 线程池, spring Async注解等",
                  "topics": [
                    {
                      "title": "困难 
1. 如何把异步流程中 的日志trace 统一起来. 请求被异步处理,而常规使用日志框架都会把 日志 traceId 等放到
线程局部变量中,当切换线程后,这部分信息会丢失"
                    },
                    {
                      "title": "2. 常规 task 提交可以手动把线程局部变量信息存储到 Task 中,但是 spring async 注解式提交如何处理呢?"
                    },
                    {
                      "title": "3. 思路是使用 aspectj 定义 runnable new 和run 两个方法的切面,这样就可以在 runnable 实例化阶段存储 threadContext ,在 run 实际运行时,将 上下文信息注入进去"
                    },
                    {
                      "title": "4.但是 aspectj编译期对 new 方法进行编译,只会编译本项目,或指定的某些 jar 包,没有对jdk进行编译, 网络查阅资料对jdk 编译难度较高,所以思考其他方向,通过阅读源代码,发现 spring 在对 async处理时,按照 Callable 进行处理,可以考虑在 spring boot中重写 submit 方法,在callable方法外部再嵌套一层,这样切面就可以被织入.
与此同时相当于 对 Callable,Runnable 进行了横切,将上下文信息保存在 map 中, 使用runable,callable对象最为key(要求这两个对象的hashcode 不可变).在runnable执行时,将上下文信息从 map 中注入到线程中.同时删除 map 相应的 key,防止出现线程泄露"
                    },
                    {
                      "title": "遇到的问题 不仅仅包括jdk 不能被织入,还遇到了诸如 lambda表达式也不能被 正确织入的问题,当 lambda方式生成一个对象时,例如 Runnable ,无法使用 aspectj 对其进行切面."
                    },
                    {
                      "title": "结论",
                      "topics": [
                        {
                          "title": "aspectj不能再编译期对 lambda织入切面,但是 spring可以在运行期对lambda bean生成切面"
                        }
                      ]
                    },
                    {
                      "title": "lambda原理",
                      "topics": [
                        {
                          "title": "使用invokedynamic指令，运行时调用LambdaMetafactory.metafactory动态的生成内部类，
实现了接口，内部类里的调用方法块并不是动态生成的，只是在原class里已经编译生成了一个
静态的方法，内部类只需要调用该静态方法"
                        },
                        {
                          "title": "@FunctionalInterface
interface Print<T> {
    public void print(T x);
}
public class Lambda {   
    public static void PrintString(String s, Print<String> print) {
        print.print(s);
    }
    private static void lambda$0(String x) {
        System.out.println(x);
    }
    final class $Lambda$1 implements Print{
        @Override
        public void print(Object x) {
            lambda$0((String)x);
        }
    }
    public static void main(String[] args) {
        PrintString("test", new Lambda().new $Lambda$1());
    }
}"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "title": "和spring aop 的区别",
              "topics": [
                {
                  "title": "[Image]"
                }
              ]
            },
            {
              "title": "织入方式",
              "topics": [
                {
                  "title": "编译时编织(CTW)：只能编织由ajc(AspectJ编译器)编译的类.这不包括JDK / JRE类以及您不从源代码编译的第三方库.上面的示例输出显示了编译时编织的效果."
                },
                {
                  "title": ">二进制编织(BW)：AspectJ编译器用于将方面代码直接编译为现有字节代码.这适用于您自己的预编译应用程序类以及第三方库.理论上,如果将rt.jar放在AspectJ编译器的路径中,它也适用于JDK / JRE类. JDK / JRE编织有点棘手,但我之前已经完成了.您可以生成一个新编织的rt.jar版本,或者只是一个带有一些编织JDK类的小JAR文件,然后在启动应用程序时将其添加到JDK / JRE的引导类路径中."
                },
                {
                  "title": ">加载时间编织(LTW)：基本上这是BW,但在类加载期间动态完成.在这个AspectJ场景中,您只能在一个方面编织器的影响下编织由类加载器加载的类.因此,它适用于您自己的代码和第三方库,但通常不使用在加载方面编织器之前加载的JDK / JRE引导类.这是一个鸡蛋和蛋类型的问题：编织者需要JRE在可以加载之前运行,但是为了编织JRE类,编织器必须在那些类被引导之前存在."
                }
              ]
            }
          ]
        },
        {
          "title": "beanPostProcessor",
          "topics": [
            {
              "title": "https://fangjian0423.github.io/2017/06/20/spring-bean-post-processor/"
            },
            {
              "title": "https://fangjian0423.github.io/2017/06/24/spring-embedded-bean-post-processor/"
            }
          ]
        },
        {
          "title": "bean的生命周期",
          "topics": [
            {
              "title": "[Image]"
            },
            {
              "title": "[Image]"
            },
            {
              "title": "主要过程",
              "topics": [
                {
                  "title": "1、Bean自身的方法　　：　　这个包括了Bean本身调用的方法和通过配置文件中<bean>的init-method和destroy-method指定的方法"
                },
                {
                  "title": "2、Bean级生命周期接口方法　　：　　这个包括了BeanNameAware、BeanFactoryAware、InitializingBean和DiposableBean这些接口的方法"
                },
                {
                  "title": "3、容器级生命周期接口方法　　：　　这个包括了InstantiationAwareBeanPostProcessor 和 BeanPostProcessor 这两个接口实现，一般称它们的实现类为“后处理器”。"
                },
                {
                  "title": "4、工厂后处理器接口方法　　：　　这个包括了AspectJWeavingEnabler, ConfigurationClassPostProcessor, CustomAutowireConfigurer等等非常有用的工厂后处理器　　接口的方法。工厂后处理器也是容器级的。在应用上下文装配配置文件之后立即调用。"
                }
              ]
            }
          ]
        }
      ]
    },
    "structure": "org.xmind.ui.map.unbalanced"
  }
]