[
  {
    "title": "画布 1",
    "topic": {
      "title": "GC",
      "topics": [
        {
          "title": "什么是堆栈,为什么要有堆栈之分"
        },
        {
          "title": "职责",
          "topics": [
            {
              "title": "分配内存"
            },
            {
              "title": "确保任何被引用的对象仍然在内存中间"
            },
            {
              "title": "重新覆盖那些在执行代码中引用不可达的内存"
            }
          ]
        },
        {
          "title": "算法优劣",
          "topics": [
            {
              "title": "延时",
              "topics": [
                {
                  "title": "并发度　= 吞吐量 * 延迟",
                  "topics": [
                    {
                      "title": "吞吐和延时是两个单独的变量.吞吐可以通过加机器,提高并发解决.提高吞吐不一定延时增加,降低吞吐,延时不一定增加"
                    },
                    {
                      "title": "要找到系统的瓶颈也就是影响并发的地方,这个地方是优化吞吐的关键.而延时可能包括:优化代码,异步处理等等"
                    },
                    {
                      "title": "延时暂时不包括等待排队延时,只是任务实际处理的延迟,在实际的监控中,应该分离这两种监控, 实际上任务处理的耗时随着吞吐量可能不变, 但是等待耗时可能会变化,因为并发度如果到了瓶颈,请求量上去,延时不变,排队的请求会变多. 用户或者调用方感受到就是延迟增加"
                    },
                    {
                      "title": "只针对一种请求或一个指标.不能把所有的请求都算上.这样结果可能有出入,因为不同接口的QPS和延时是不同的,
会出现因为某些请求突然增加减少,导致整体延时增加或者减少的情况"
                    },
                    {
                      "title": "通过观察请求延时(包括排队)和处理延时,可以让我们看到实际的并发度.避免用户请求排队"
                    }
                  ]
                }
              ]
            },
            {
              "title": "占用CPU",
              "topics": [
                {
                  "title": "并发还是串行"
                }
              ]
            },
            {
              "title": "内存碎片",
              "topics": [
                {
                  "title": "需要压缩"
                }
              ]
            },
            {
              "title": "频繁程度"
            },
            {
              "title": "Stop the world",
              "topics": [
                {
                  "title": "枚举根节点时需要禁止对象引用关系的变化,否则无法准确GC"
                },
                {
                  "title": "JVM会在特定的数据结构中记录所有对象的引用关系"
                },
                {
                  "title": "并不是线程的任何字节码指令执行时,都能被挂起,只有特定的某些地方,才可以挂起线程,暂停点"
                },
                {
                  "title": "STW前需要暂停所有线程,所以 PrintGCApplicationStoppedTime jvm参数 会打印Stopping 线程所需要的时间"
                },
                {
                  "title": "Java 线程模型采用 LWP 1:1 即一个线程映射为一个内核线程, 在函数进入退出, uncount loop(while) 循环等会专门有检查点, 检查点也就是有一条机器指令,访问某个内存页,该页为缺页时,就会触发一个中断信号, 线程转而需要执行该信号处理,即 停止执行",
                  "topics": [
                    {
                      "title": "子主题 1",
                      "topics": [
                        {
                          "title": " Signal Dispatcher",
                          "topics": [
                            {
                              "title": "信号处理分配器, linux  上的信号处理只能有一个线程处理"
                            }
                          ]
                        },
                        {
                          "title": "CompilerThread0",
                          "topics": [
                            {
                              "title": "即时编译线程"
                            }
                          ]
                        },
                        {
                          "title": null
                        },
                        {
                          "title": "Attach Listener",
                          "topics": [
                            {
                              "title": "该线程负责接收外部命令，执行该命令并把结果返回给调用者
java -version"
                            }
                          ]
                        },
                        {
                          "title": "Reference Handler",
                          "topics": [
                            {
                              "title": "JVM在创建main线程后就创建Reference Handler线程，其优先级最高，为10，它主要用于处理引用对象本身（软引用、弱引用、虚引用）的垃圾回收问题 。"
                            }
                          ]
                        },
                        {
                          "title": "VM Thread",
                          "topics": [
                            {
                              "title": "VM中线程的母体，根据HotSpot源码中关于vmThread.hpp里面的注释，它是一个单例的对象（最原始的线程）会产生或触发所有其他的线程，这个单例的VM线程是会被其他线程所使用来做一些VM操作（如清扫垃圾等）。"
                            },
                            {
                              "title": "VM线程是HotSpot VM中的特殊线程。它在VM中执行特殊任务，例如垃圾收集"
                            },
                            {
                              "title": "在 VM Thread 的结构体里有一个VMOperationQueue列队，所有的VM线程操作(vm_operation)都会被保存到这个列队当中，VMThread 本身就是一个线程，它的线程负责执行一个自轮询的loop函数(具体可以参考：VMThread.cpp里面的void VMThread::loop()) ，该loop函数从VMOperationQueue列队中按照优先级取出当前需要执行的操作对象(VM_Operation)，并且调用VM_Operation->evaluate函数去执行该操作类型本身的业务逻辑。"
                            },
                            {
                              "title": "VM操作类型被定义在vm_operations.hpp文件内，列举几个：ThreadStop、ThreadDump、PrintThreads、GenCollectFull、GenCollectFullConcurrent、CMS_Initial_Mark、CMS_Final_Remark"
                            }
                          ]
                        },
                        {
                          "title": "VM Periodic Task Thread",
                          "topics": [
                            {
                              "title": "该线程是JVM周期性任务调度的线程，它由WatcherThread创建，是一个单例对象。该线程在JVM内使用得比较频繁，比如：定期的内存监控、JVM运行状况监控。"
                            },
                            {
                              "title": "例如 jstat,查看 内部监控",
                              "topics": [
                                {
                                  "title": null
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "title": "GC task thread",
                          "topics": [
                            {
                              "title": "垃圾回收线程，该线程会负责进行垃圾回收。通常JVM会启动多个线程来处理这个工作"
                            }
                          ]
                        },
                        {
                          "title": "Concurrent Mark-Sweep GC Thread",
                          "topics": [
                            {
                              "title": "并发标记清除垃圾回收器（就是通常所说的CMS GC）线程， 该线程主要针对于年老代垃圾回收"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "title": "为什么",
                  "topics": [
                    {
                      "title": "   1. 用户线程和 c mark 线程存在并发竞争.

     1.1A 独立, B 引用 C.  cmark先遍历了 A, cmark 线程遍历到 B 时, 用户线程将 C 给了 A.  这时候 C 没有被 reachable 到. 最后认为 C 是 unreable 的.其实并不是

    1.2. 另外已分配的池也时时变大. 如果不锁住,也会被有问题.导致 unreachable 计算的有误."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "title": "发生时机",
          "topics": [
            {
              "title": "新生代、年老代和永久代这三个空间中的任何一个不能满足内存分配请求时，就会发生垃圾收集"
            }
          ]
        },
        {
          "title": "内存管理",
          "topics": [
            {
              "title": "内存组织",
              "topics": [
                {
                  "title": "指针碰撞",
                  "topics": [
                    {
                      "title": "使用一个指针记录空闲内存的起始地址,每次内存连续分配"
                    },
                    {
                      "title": "ParNew, Serial垃圾回收都使用这种方式,使用标记复制算法的"
                    },
                    {
                      "title": "为了避免线程同步,使用TLAB 线程局部存储空间 ,如果该内存不足,则使用 CAS算法,无锁同步申请内存"
                    }
                  ]
                },
                {
                  "title": "空闲链表",
                  "topics": [
                    {
                      "title": "使用一个链表记录内存的空闲地址,内存分配并不是连续的"
                    }
                  ]
                }
              ]
            },
            {
              "title": "内存区域",
              "topics": [
                {
                  "title": "MetaSpace元数据",
                  "topics": [
                    {
                      "title": "非堆空间,是jvm从os 中申请的内存,可以动态扩展,不会参与垃圾回收"
                    },
                    {
                      "title": "每一个类加载器都会对应一个元数据空间"
                    }
                  ]
                }
              ]
            },
            {
              "title": "根搜索算法",
              "topics": [
                {
                  "title": "根节点",
                  "topics": [
                    {
                      "title": "1. 虚拟机栈(栈桢中的本地变量表)中的引用的对象 ； "
                    },
                    {
                      "title": "2. 方法区中的类静态属性引用的对象 ； "
                    },
                    {
                      "title": "3. 方法区中的常量引用的对象 ； "
                    },
                    {
                      "title": "4. 本地方法栈中JNI的引用的对象； "
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "title": "日志查看",
          "topics": [
            {
              "title": "real time指进程实际处理的时间.包括占用cpu  时间.i/o, 锁等待是 block,挂起时间"
            },
            {
              "title": "user time,sys time 是指进程处于用户态和内核态的 cpu时间.(不包括i/o 阻塞时间)"
            },
            {
              "title": "由于多线程情景的存在,进程的 real time 可能小于 user, sys time"
            }
          ]
        },
        {
          "title": "排查工具",
          "topics": [
            {
              "title": "jstack -l pid"
            },
            {
              "title": "jmap -heap",
              "topics": [
                {
                  "title": "dump 出当前进程的内存使用情况"
                },
                {
                  "title": "会可能导致当前进程阻塞"
                }
              ]
            },
            {
              "title": "jmap -histo 10953",
              "topics": [
                {
                  "title": "查看类实例的柱状信息"
                }
              ]
            },
            {
              "title": "pmap 490 |sort -t ' ' -n -k 2 -r|less",
              "topics": [
                {
                  "title": "将进程的内存按照大小进行排序"
                },
                {
                  "title": "需要加这个参数  -XX:NativeMemoryTracking=detail"
                }
              ]
            },
            {
              "title": "jfr 飞行记录仪"
            },
            {
              "title": "-XX:NativeMemoryTracking=detail

jcmd pid VM.native_memory detail",
              "topics": [
                {
                  "title": "查看各个内存的占用大小"
                }
              ]
            }
          ]
        },
        {
          "title": "参数",
          "topics": [
            {
              "title": "-XX:+PrintTenuringDistribution 打印gc  后survivor 区的年龄分布"
            },
            {
              "title": "xmx xms设定要相同,每次申请内存之前,实际上都是需要Full GC  的"
            },
            {
              "title": "-XX:+HeapDumpOnOutOfMemoryError  在发生OOM时 生成 dump文件",
              "makers": [
                "priority-1",
                "task-done",
                "star-red",
                "symbol-question"
              ]
            },
            {
              "title": "-XX:+DisableExplictitGC  禁用 System.gc()"
            },
            {
              "title": "元数据优化",
              "topics": [
                {
                  "title": "-XX:+MaxMetaspaceSize  最大空间"
                },
                {
                  "title": "-XX:+MetaspaceSize  初始空间"
                },
                {
                  "title": "-XX:+MinMetaspaceFreeRatio 扩大空间的最小阈值比例"
                },
                {
                  "title": "-XX:+MaxMetaspaceFreeRatio 缩小空间的最大阈值比例"
                }
              ]
            },
            {
              "title": "ParallecGCThreads",
              "topics": [
                {
                  "title": "ParNew gc 时的线程数, 一般设置cpu 核数就可以"
                }
              ]
            },
            {
              "title": "CMS",
              "topics": [
                {
                  "title": "-XX:+UseConcMarkSweepGC",
                  "topics": [
                    {
                      "title": "使用 CMS 回收老年代"
                    }
                  ]
                },
                {
                  "title": "再次标记前minor gc 一次,减少新生代对象大小,减少遍历时间 -XX:+CMSScavengeBeforeRemark"
                },
                {
                  "title": "-XX:CMSFullGCsBeforeCompaction=n",
                  "topics": [
                    {
                      "title": "指发生多少次Full gc  才开启压缩 默认是0, 即每次Full gc 后都会压缩"
                    },
                    {
                      "title": "如果设置过高,会导致内存碎片问题严重,多次 Full GC 后也无法压缩"
                    }
                  ]
                },
                {
                  "title": "-XX:CMSInitiatingOccupancyFraction=70",
                  "topics": [
                    {
                      "title": "CMS在对内存占用率达到70%的时候开始GC"
                    },
                    {
                      "title": "如果内存增长过快,可以适度降低该值,减少 GC 期间,内存不够的问题"
                    },
                    {
                      "title": "如果内存增长缓慢,可以考虑将该值设置高一点, 减少 CMS gc频率"
                    },
                    {
                      "title": "确认是否需要提升老年代空间大小 否则该问题会一直很严重"
                    }
                  ]
                },
                {
                  "title": "ParallecCMSThreads",
                  "topics": [
                    {
                      "title": "CMS gc时指定的线程核数"
                    }
                  ]
                }
              ]
            },
            {
              "title": "-XX:+-XX:+PrintGC	",
              "topics": [
                {
                  "title": "详细的GC日志"
                }
              ]
            },
            {
              "title": "停顿时间",
              "topics": [
                {
                  "title": "-XX:+PrintGCApplicationStoppedTime",
                  "topics": [
                    {
                      "title": "打印垃圾回收期间程序暂停的时间"
                    }
                  ]
                },
                {
                  "title": "-XX:+PrintGCApplicationConcurrentTime	",
                  "topics": [
                    {
                      "title": "打印每次垃圾回收前，程序未中断的执行时间"
                    }
                  ]
                }
              ]
            },
            {
              "title": "-XX:+PrintTLAB	",
              "topics": [
                {
                  "title": "打印  线程在eden 分配独有空间的大小"
                }
              ]
            },
            {
              "title": "-XX:+HeapDumpOnOutOfMemoryError	",
              "topics": [
                {
                  "title": "OOM时打印堆栈信息"
                }
              ]
            },
            {
              "title": "-XX:+PrintClassHistogramBeforeFullGC	
-XX:+PrintClassHistogramBeforeFullGC	",
              "topics": [
                {
                  "title": "Full gc前后打印类的柱状信息"
                }
              ]
            },
            {
              "title": "docker 情况下, 由于获取的核数默认为物理机核数,所以需要手动设置 并行垃圾回收器的线程数"
            }
          ]
        },
        {
          "title": "zstack 优化",
          "topics": [
            {
              "title": "调大堆内存",
              "topics": [
                {
                  "title": "禁止运行时获取内存"
                }
              ]
            },
            {
              "title": "将老年代比例降下来",
              "topics": [
                {
                  "title": "增加新生代的比例,这样让minor gc 减少,减少minor gc,冲向 老年代的对象就少很多"
                }
              ]
            },
            {
              "title": "子主题 3"
            }
          ]
        },
        {
          "title": "问题",
          "topics": [
            {
              "title": "promotion failed
会发生Full GC ",
              "topics": [
                {
                  "title": "1. 救助空间不够，救助空间里的对象还不应该被移动到年老代，但年轻代又有很多对象需要放入救助空间；"
                },
                {
                  "title": "2. 年老代没有足够的空间接纳来自年轻代的对象；这两种情况都会转向Full GC"
                },
                {
                  "title": "3.应该说该问题和 CMS没有关系,这是新生代gc 时发生的问题,cms 老年代GC时,出现提升失败一般会报 concurrent mode failure"
                },
                {
                  "title": "问题根源",
                  "topics": [
                    {
                      "title": "老年代空间确实不够用"
                    },
                    {
                      "title": "老年代内存碎片严重,没有完整空间存放该对象",
                      "topics": [
                        {
                          "title": "CMSFullGCsBeforeCompaction 不要设置过大,会导致多次Full GC 才压缩"
                        }
                      ]
                    },
                    {
                      "title": "可能是新生代提升过快?是不是survior空间太小,调大试试?"
                    },
                    {
                      "title": "-XX:CMSInitiatingOccupancyFraction过高, 老年代为新生代担保的剩余空间不足"
                    }
                  ]
                }
              ]
            },
            {
              "title": "concurrent mode failure",
              "topics": [
                {
                  "title": "CMS GC 期间,提升对象时(ygc 或大对象)老年代空间不足",
                  "topics": [
                    {
                      "title": "会使用串行收集器收集老年代垃圾"
                    }
                  ]
                }
              ]
            },
            {
              "title": "promotion failed – concurrent mode failure
Minor GC后， Survivor空间容纳不了剩余对象，将要放入老年代，老年代有碎片或者不能容纳这些对象，就产生了concurrent mode failure, 然后进行stop-the-world的Serial Old收集器。"
            }
          ]
        },
        {
          "title": "Full GC",
          "topics": [
            {
              "title": "步骤",
              "topics": [
                {
                  "title": "新生代的 GC算法对新生代 GC"
                },
                {
                  "title": "老年代的 GC算法对老年代,永久代gc"
                }
              ]
            },
            {
              "title": "发生条件",
              "topics": [
                {
                  "title": "system.gc();"
                },
                {
                  "title": "旧生代空间不足",
                  "topics": [
                    {
                      "title": "新生代对象转入"
                    },
                    {
                      "title": "创建为大对象、大数组时"
                    }
                  ]
                },
                {
                  "title": ". Permanet Generation空间满",
                  "topics": [
                    {
                      "title": "可使用 CMS GC"
                    }
                  ]
                },
                {
                  "title": "CMS时异常",
                  "topics": [
                    {
                      "title": "promotion failed",
                      "topics": [
                        {
                          "title": "新生代往老年代提升时",
                          "topics": [
                            {
                              "title": "正常年龄足够"
                            },
                            {
                              "title": "survivor 不足,直接提升老年代"
                            }
                          ]
                        },
                        {
                          "title": "老年代恰好空间不够"
                        },
                        {
                          "title": "应对措施",
                          "topics": [
                            {
                              "title": "增大survivor space"
                            },
                            {
                              "title": "增大旧生代空间"
                            },
                            {
                              "title": "调低触发并发GC的比率",
                              "topics": [
                                {
                                  "title": "到达该比率 CMS会开启垃圾回收,这样老年代空间会空闲较多"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "title": "concurrent mode failure"
                    }
                  ]
                },
                {
                  "title": "统计异常",
                  "topics": [
                    {
                      "title": "统计得到的Minor GC晋升到旧生代的平均大小大于旧生代的剩余空间",
                      "topics": [
                        {
                          "title": "此时不会使用新生代 GC方式去回收新生代,而是使用老年代方式回收新生代,老年代,永久代"
                        }
                      ]
                    }
                  ]
                },
                {
                  "title": "实际上除了 CMS, G1其他老年代gc 算法,都会在老年代gc 时,触发Full gc "
                }
              ]
            },
            {
              "title": "失败",
              "topics": [
                {
                  "title": "如果以上老年代,永久代触发的Full GC 后,分配空间再失败就会报以下异常"
                },
                {
                  "title": "：java.lang.OutOfMemoryError: Java heap space"
                },
                {
                  "title": "java.lang.OutOfMemoryError: PermGen space"
                }
              ]
            },
            {
              "title": "serail Old GC",
              "topics": [
                {
                  "title": "单线程回收"
                }
              ]
            }
          ]
        },
        {
          "title": "minor gc",
          "topics": [
            {
              "title": "会stop the world",
              "topics": [
                {
                  "title": "如果eden大部分对象朝生夕死时间比较短,但是如果大量存活对象,就会很慢"
                },
                {
                  "title": "minor gc  的耗时主要在复制对象的时间上"
                },
                {
                  "title": "minor gc 时,老年代是不会增长的, 如果老年代引用了新生代,其实也算是新生代 的对象被root根引用了,这样反向引用会导致大量新生代对象被引用,在某些长任务的进程里,会有很多对象引用进老年代

一般情况是,新生代对象引用老年代对象,例如一个普通对象引用了service,dao等常见组件等,这样新生代向老年代的引用会被忽略掉"
                }
              ]
            },
            {
              "title": "eden Survivor from to"
            },
            {
              "title": "使用标记复制,每一次minor gc eden 区都会被 clear ,eden区每次内存分配都从顶部开始"
            },
            {
              "title": "minor gc将eden区及from survivor区域的存活对象进行处理
如果这些对象年龄达到阈值，则直接晋升到年老代
若要拷贝的对象太大，那么不会拷贝到to survivor，而是直接进入年老代
若to survivor区域空间不够/或者复制过程中出现不够，则发生survivor溢出，直接进入年老代
其他的，若to survivor区域空间够，则存活对象拷贝到to survivor区域"
            }
          ]
        },
        {
          "title": "日志",
          "topics": [
            {
              "title": "-Xloggc:logs/gclog.%p -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=50M -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps"
            },
            {
              "title": "gc real time 才是实际的cpu 耗时",
              "topics": [
                {
                  "title": "

    The sys and user are CPU times exclusively. Consequently they do not include the time that the process is blocked for CPU or is doing I/O etc.
    The GC time should generally be similar to the sys+user time but if the process is blocked or waiting then it would be higher. This would be true for a serial collector and a single processor box. However, in the multiprocessor environments (with parallel collectors), the GC time would be lesser than the sys+user time since there are multiple CPUs.
    The real time would be similar to the GC time.

"
                }
              ]
            }
          ]
        },
        {
          "title": "[Image]"
        }
      ]
    },
    "structure": "org.xmind.ui.map.unbalanced"
  }
]