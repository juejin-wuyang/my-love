[
  {
    "title": "画布 1",
    "topic": {
      "title": "分布式服务框架",
      "topics": [
        {
          "title": "profile",
          "topics": [
            {
              "title": "分布式服务框架 主要是为了解决内部服务化之后业务接口跨进程通信问题."
            }
          ]
        },
        {
          "title": "最简化的思路",
          "topics": [
            {
              "title": "服务需要注册中心, 服务提供者 注册自己的服务, 服务消费者订阅自己的服务",
              "topics": [
                {
                  "title": "使用zk,分别创建服务目录, 同时创建该服务的 提供者和消费者目录"
                }
              ]
            },
            {
              "title": "发起请求时, 基于动态代理,客户端使用在本地的动态代理,向远端发起请求"
            },
            {
              "title": "向哪个机器发送请求,使用负载均衡算法"
            },
            {
              "title": "怎么发送请求呢,Nety"
            },
            {
              "title": "消息如何序列化呢?"
            },
            {
              "title": "服务器端 针对服务启动动态代理,监听某个网络端口, 代理本地的服务代码"
            }
          ]
        },
        {
          "title": "主要组成",
          "topics": [
            {
              "title": "通信框架"
            },
            {
              "title": "序列化框架"
            },
            {
              "title": "协议栈",
              "topics": [
                {
                  "title": "如何定义rpc请求报文结构"
                },
                {
                  "title": "此时rpc可参考http"
                }
              ]
            },
            {
              "title": "服务调用",
              "topics": [
                {
                  "title": "同步还是异步调用"
                },
                {
                  "title": "泛化调用"
                }
              ]
            },
            {
              "title": "服务注册中心",
              "topics": [
                {
                  "title": "服务发现",
                  "topics": [
                    {
                      "title": "服务路由",
                      "topics": [
                        {
                          "title": "服务发现",
                          "topics": [
                            {
                              "title": "获取依赖服务的地址"
                            }
                          ]
                        },
                        {
                          "title": "负载均衡"
                        },
                        {
                          "title": "路由规则"
                        }
                      ]
                    },
                    {
                      "title": "集群容错",
                      "topics": [
                        {
                          "title": "即rpc调用失败, 如何处理这个失败?",
                          "topics": [
                            {
                              "title": "failover"
                            },
                            {
                              "title": "failback"
                            },
                            {
                              "title": "failcache"
                            },
                            {
                              "title": "failfast"
                            },
                            {
                              "title": "其他容错策略"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "title": "服务灰度发布."
                    },
                    {
                      "title": "版本支持"
                    },
                    {
                      "title": "流量控制"
                    },
                    {
                      "title": "服务降级"
                    }
                  ]
                },
                {
                  "title": "根据服务获取到地址, 对于地址可以进行负载均衡, 路由策略, 流量控制, 集群容错.
总之就是针对服务注册中心获取的服务地址, 进行过滤 & 统计 "
                }
              ]
            },
            {
              "title": "服务引用&发布",
              "topics": [
                {
                  "title": "即服务端注册,与客户端调用的使用方式. 及
可以配置的方式"
                },
                {
                  "title": "服务优先级设置. 即服务端对于不同的接口设置不同的优先级"
                }
              ]
            },
            {
              "title": "集群容错",
              "topics": [
                {
                  "title": "失败自动切换,"
                },
                {
                  "title": "快速失败"
                },
                {
                  "title": "失败自动恢复",
                  "topics": [
                    {
                      "title": "后台就失败请求,重试其他服务器, 通常用于读请求"
                    }
                  ]
                }
              ]
            },
            {
              "title": "服务路由",
              "topics": [
                {
                  "title": "默认提供随机路由,轮训,基于权重的路由策略"
                },
                {
                  "title": "粘滞连接"
                },
                {
                  "title": "路由定制",
                  "topics": [
                    {
                      "title": "支持自定义路由策略"
                    },
                    {
                      "title": "可以把上游服务的流量给切换到某个集群上"
                    },
                    {
                      "title": "服务故障, 倒流, 灰度升级"
                    }
                  ]
                },
                {
                  "title": "多机房路由 是其中一个案例. 可以通过 配置自定义路由策略, 指定哪个消费者只能访问哪个提供者. "
                },
                {
                  "title": "最佳思想是: 代码里不要配置, 而是要单独的平台去配置 路由策略"
                }
              ]
            },
            {
              "title": "配置中心",
              "topics": [
                {
                  "title": "提供动态参数配置服务"
                }
              ]
            },
            {
              "title": "服务治理",
              "topics": [
                {
                  "title": "traceId"
                },
                {
                  "title": "调用时长"
                },
                {
                  "title": "故障快速定位"
                },
                {
                  "title": "服务依赖分析"
                },
                {
                  "title": "服务权限控制"
                },
                {
                  "title": "分布式服务日志",
                  "topics": [
                    {
                      "title": "故障定位"
                    },
                    {
                      "title": "调用路径"
                    },
                    {
                      "title": "调用来源 & 去向"
                    }
                  ]
                },
                {
                  "title": "可靠性",
                  "topics": [
                    {
                      "title": "故障隔离 ",
                      "topics": [
                        {
                          "title": "熔断"
                        },
                        {
                          "title": "机器隔离"
                        }
                      ]
                    },
                    {
                      "title": "服务SLA "
                    },
                    {
                      "title": "注册中心 可靠性"
                    }
                  ]
                }
              ]
            },
            {
              "title": "微服务架构",
              "topics": [
                {
                  "title": "服务粒度, 如何拆分"
                },
                {
                  "title": "devops"
                },
                {
                  "title": "研发团队协同问题"
                }
              ]
            },
            {
              "title": "性能问题",
              "topics": [
                {
                  "title": "rpc性能优化"
                },
                {
                  "title": "调用链路优化",
                  "topics": [
                    {
                      "title": "业务层"
                    }
                  ]
                },
                {
                  "title": "事务一致性"
                }
              ]
            }
          ]
        },
        {
          "title": "只有rpc框架还远远不够",
          "topics": [
            {
              "title": "服务URL配置难度随服务数量增加, 越来越困难. 服务动态注册与发现, 负载均衡都需要一个强大的注册中心服务"
            },
            {
              "title": "服务依赖关系会越来越错综复杂, 相比进程内调用可以快速查看调用关系,服务间调用需要分布式请求跟踪系统, 可视化的展示服务调用链. 用于以来分析 , 业务调用路径梳理. 清理不合理服务依赖"
            },
            {
              "title": "服务调用量越来越大, 容量规划问题需要 强大的流量分析平台, 帮助梳理服务间, 调用链上面的流量情况.",
              "topics": [
                {
                  "title": "服务调用时延, 成功率, 吞吐率等"
                }
              ]
            },
            {
              "title": "上线容易下线难, 服务与接口的生命周期管理十分迫切, 发布平台需要支持 
上线回滚下线 灰度发布,流量隔离, AB 测试等.",
              "topics": [
                {
                  "title": "如果没有灰度发布, 流量隔离, 那么替换一个接口, 上线需要同时保留新旧接口,
新接口全部发布完, 需要再次上线, 下掉旧接口. 如果可以灰度发布 , 
那么通过流量隔离, 1次上线发布完毕, 代码开发也更加简单."
                },
                {
                  "title": "服务限流, 服务权重调整, 超时控制,"
                }
              ]
            },
            {
              "title": "故障快速定位",
              "topics": [
                {
                  "title": "大规模分布式环境下海量业务/平台日志收集, 汇总和实时检索, 多维度查询的条件检索, 模糊查询."
                }
              ]
            },
            {
              "title": "服务安全",
              "topics": [
                {
                  "title": "服务接口调用鉴权, 防止接口误调用."
                },
                {
                  "title": "数据敏感型服务如何保护."
                },
                {
                  "title": "可以动态生成令牌, 做安全访问授权. 可以由服务注册中心,决定是否告知消费方, 是否对消费端可见. 
以及在网关层 作流量鉴权."
                }
              ]
            }
          ]
        },
        {
          "title": "通信框架",
          "topics": [
            {
              "title": "netty"
            },
            {
              "title": "nio & bio"
            },
            {
              "title": "server端 线程模型"
            },
            {
              "title": "服务端的职责",
              "topics": [
                {
                  "title": "提供上层API. 初始化服务端实例, 设置服务端通信参数, IO线程池参数, 监听地址, backlog, tcp相关参数, 例如 no_dalay, quickack, 收发缓冲池大小."
                },
                {
                  "title": "提供可扩展的编解码插件, 提供拦截面"
                },
                {
                  "title": "原则",
                  "topics": [
                    {
                      "title": "不负责编解码的实现, 不负责具体通信协议."
                    },
                    {
                      "title": "屏蔽底层的通讯细节, NIO, BIO, IO 多路复用, 等."
                    },
                    {
                      "title": "可扩展性要强"
                    }
                  ]
                }
              ]
            },
            {
              "title": "影响通讯框架性能的三个方面",
              "topics": [
                {
                  "title": "传输",
                  "topics": [
                    {
                      "title": "BIO, NIO, AIO "
                    }
                  ]
                },
                {
                  "title": "协议",
                  "topics": [
                    {
                      "title": "rpc请求的协议类型, http? dubbo, thrift协议?"
                    }
                  ]
                },
                {
                  "title": "线程模型",
                  "topics": [
                    {
                      "title": "使用何种线程模型进行处理socket "
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "title": "主要的服务框架",
          "topics": [
            {
              "title": "rpcx: 基于Go的服务治理的rpc框架、客户端支持跨语言"
            },
            {
              "title": "grpc: Google 出品的跨语言rpc框架，很弱的(实验性的)负载均衡, 测试使用的是grpc-go"
            },
            {
              "title": "go std rpc: Go标准库的rpc, 不支持跨语言(jsonrpc支持json rpc 1.0)"
            },
            {
              "title": "thrift: 跨语言的rpc框架，facebook贡献"
            },
            {
              "title": "dubbo: 国内较早开源的服务治理的Java rpc框架，虽然在阿里巴巴内部竞争中落败于HSF，沉寂了几年，但是在国内得到了广泛的应用，目前dubbo项目又获得了支持，并且dubbo 3.0也开始开发"
            },
            {
              "title": "motan: 微博内部使用的rpc框架，底层支持java,生态圈往service mesh发展以支持多语言"
            },
            {
              "title": "hprose: 国内开发人员开发的一个跨语言的rpc框架，非服务治理但是性能高效"
            },
            {
              "title": "twirp: twitch.tv刚刚开源的一个restful风格的rpc框架"
            },
            {
              "title": "go-micro: Go语言的一个服务治理rpc框架， 在测试中发现性能不太好，所以没有继续测试，相关的测试代码已在github库中"
            },
            {
              "title": "go kit:"
            },
            {
              "title": "腾讯 Tars:腾讯公司的rpc框架"
            },
            {
              "title": "百度 brpc: 百度公司的rpc框架"
            },
            {
              "title": "spring cloud:"
            }
          ]
        }
      ]
    },
    "structure": "org.xmind.ui.map.unbalanced"
  }
]