[
  {
    "title": "画布 1",
    "topic": {
      "title": "秒杀架构",
      "topics": [
        {
          "title": "架构设计理念",
          "topics": [
            {
              "title": "限流",
              "topics": [
                {
                  "title": " 鉴于只有少部分用户能够秒杀成功，所以要限制大部分流量，只允许少部分流量进入服务后端"
                }
              ]
            },
            {
              "title": "削峰",
              "topics": [
                {
                  "title": "对于秒杀系统瞬时会有大量用户涌入，所以在抢购一开始会有很高的瞬间峰值。高峰值流量是压垮系统很重要的原因，所以如何把瞬间的高流量变成一段时间平稳的流量也是设计秒杀系统很重要的思路。实现削峰的常用的方法有利用缓存和消息中间件等技术"
                }
              ]
            },
            {
              "title": "异步处理",
              "topics": [
                {
                  "title": "秒杀系统是一个高并发系统，采用异步处理模式可以极大地提高系统并发量，其实异步处理就是削峰的一种实现方式"
                }
              ]
            },
            {
              "title": "内存缓存",
              "topics": [
                {
                  "title": "秒杀系统最大的瓶颈一般都是数据库读写，由于数据库读写属于磁盘IO，性能很低，如果能够把部分数据或业务逻辑转移到内存缓存，效率会有极大地提升"
                }
              ]
            },
            {
              "title": "可拓展",
              "topics": [
                {
                  "title": "当然如果我们想支持更多用户，更大的并发，最好就将系统设计成弹性可拓展的，如果流量来了，拓展机器就好了。像淘宝、京东等双十一活动时会增加大量机器应对交易高峰"
                }
              ]
            },
            {
              "title": "热点隔离",
              "topics": [
                {
                  "title": "将这种热点数据隔离出来，不要让1%的请求影响到另外的99%，隔离出来后也更方便对这1%的请求做针对性优化"
                },
                {
                  "title": "启用单独cache集群或MySQL数据库来放热点数据，目前也是不想0.01%的数据影响另外99.99%。"
                },
                {
                  "title": "按照用户来区分，给不同用户分配不同cookie，在接入层路由到不同服务接口中；
在接入层可以对URL的不同Path来设置限流策略等。服务层通过调用不同的服务接口；
数据层可以给数据打上特殊的标来区分。
目的都是把已经识别出来的热点和普通请求区分开来。"
                }
              ]
            }
          ]
        },
        {
          "title": "方案",
          "topics": [
            {
              "title": "前端方案",
              "topics": [
                {
                  "title": "页面静态化：将活动页面上的所有可以静态的元素全部静态化，并尽量减少动态元素。通过CDN来抗峰值。 "
                },
                {
                  "title": "禁止重复提交：用户提交之后按钮置灰，禁止重复提交 "
                },
                {
                  "title": "用户限流：在某一时间段内只允许用户提交一次请求，比如可以采取IP限流"
                }
              ]
            },
            {
              "title": "服务端",
              "topics": [
                {
                  "title": "限制uid（UserID）访问频率：我们上面拦截了浏览器访问的请求，但针对某些恶意攻击或其它插件，在服务端控制层需要针对同一个访问uid，限制访问频率。"
                },
                {
                  "title": "缓存技术",
                  "topics": [
                    {
                      "title": "采用消息队列缓存请求：既然服务层知道库存只有100台手机，那完全没有必要把100W个请求都传递到数据库啊，那么可以先把这些请求都写到消息队列缓存一下，数据库层订阅消息减库存，减库存成功的请求返回秒杀成功，失败的返回秒杀结束。"
                    },
                    {
                      "title": "利用缓存应对读请求：对类似于12306等购票业务，是典型的读多写少业务，大部分请求是查询请求，所以可以利用缓存分担数据库压力。"
                    },
                    {
                      "title": "利用缓存应对写请求：缓存也是可以应对写请求的，比如我们就可以把数据库中的库存数据转移到Redis缓存中，所有减库存操作都在Redis中进行，然后再通过后台进程把Redis中的用户秒杀请求同步到数据库中。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "title": "其他减少访问量的策略",
          "topics": [
            {
              "title": "随机分配秒杀机会",
              "topics": [
                {
                  "title": "使用数组为并发请求随机分配秒杀状态（成功和失败），然后将分配到失败状态的请求派发到秒杀失败的页面，分到成功状态的用户在慢慢的按顺序执行秒杀操作；（如果处理失败了可以利用日志来查找具体秒杀失败的商品和用户，执行补救措施或者从其他用户中拿取一个来执行秒杀操作）"
                }
              ]
            },
            {
              "title": "用数组分配",
              "topics": [
                {
                  "title": "类似于策略2，不过是用数组为用户分配秒杀资格，将大流量的用户限制为小流量的用户，得到秒杀资格的去执行秒杀，得不到秒杀资格的跳到秒杀失败页面"
                }
              ]
            },
            {
              "title": "或者用redis 分配,固定key 的分布式锁,也可以理解为限流"
            }
          ]
        },
        {
          "title": "数据支撑",
          "topics": [
            {
              "title": "2013年的小米秒杀吗？三款小米手机各11万台开卖，走的都是大秒系统，3分钟后成为双十一第一家也是最快破亿的旗舰店。"
            },
            {
              "title": "经过日志统计，前端系统双11峰值有效请求约60w以上的QPS ，
后端cache的集群峰值近2000w/s、单机也近30w/s，
真正的写时流量要小很多了，当时最高下单减库存tps是红米创造，达到1500/s"
            }
          ]
        }
      ]
    },
    "structure": "org.xmind.ui.map.unbalanced"
  }
]