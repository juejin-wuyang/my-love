[
  {
    "title": "画布 1",
    "topic": {
      "title": "文件IO / 内存管理",
      "topics": [
        {
          "title": "参考文档",
          "topics": [
            {
              "title": "https://www.cnblogs.com/huxiao-tee/p/4657851.html"
            },
            {
              "title": "http://www.0xffffff.org/2017/05/01/41-linux-io/ "
            },
            {
              "title": "https://www.ibm.com/developerworks/cn/linux/l-cn-directio/ ",
              "link": "https://www.ibm.com/developerworks/cn/linux/l-cn-directio/"
            }
          ]
        },
        {
          "title": "内存管理",
          "topics": [
            {
              "title": "malloc",
              "topics": [
                {
                  "title": "在用户地址空间分配内存"
                },
                {
                  "title": "从空闲内存链表中申请内存, 如果不够则调用brk/sbrk 实际增大 进程堆地址空间"
                },
                {
                  "title": "malloc free 是基于进程的空闲链表的, malloc 是c语言标准库函数"
                }
              ]
            },
            {
              "title": "free",
              "topics": [
                {
                  "title": "释放空间, 接受的指针 必须是malloc返回的地址",
                  "topics": [
                    {
                      "title": "不能重复释放多次"
                    }
                  ]
                },
                {
                  "title": "会调整合并空闲链表, 也可能修改 program break. (当空闲内存太多)"
                },
                {
                  "title": "空闲链表是由一个个内存块 组成的, 其中 该链表的 next指针及长度是维护在内存块中的. "
                },
                {
                  "title": "如果空闲链表碎片化严重, 大内存则无法分配,而且 额外的指针及长度管理信息 占用实际内存大小"
                }
              ]
            },
            {
              "title": "brk/sbrk",
              "topics": [
                {
                  "title": "program break 代表堆得内存边界. "
                },
                {
                  "title": "堆是 长度可变的连续虚拟内存",
                  "topics": [
                    {
                      "title": "物理地址不连续"
                    }
                  ]
                },
                {
                  "title": "brk 会指定program break的值,也就是指定堆的边界"
                },
                {
                  "title": "sbrk 是指定 堆在边界增长多大. ",
                  "topics": [
                    {
                      "title": "linux 堆向上增长"
                    }
                  ]
                }
              ]
            },
            {
              "title": "calloc / realloc",
              "topics": [
                {
                  "title": "calloc 指定 size , num 分配内存, 而且 内存初始化为 0"
                },
                {
                  "title": "realloc 扩大指定内存的地址, 例如给数组指针arr 扩大increment. ",
                  "topics": [
                    {
                      "title": "会触发内存拷贝. "
                    }
                  ]
                }
              ]
            },
            {
              "title": "alloca ",
              "topics": [
                {
                  "title": "在当前栈帧上分配内存. 栈帧随函数返回释放时,也会被释放.",
                  "topics": [
                    {
                      "title": "可避免内存泄漏问题"
                    },
                    {
                      "title": "如果存在return 或者地址赋值, 该地址依然会被拷贝到新的栈帧内"
                    }
                  ]
                }
              ]
            },
            {
              "title": "kmalloc && vmalloc",
              "topics": [
                {
                  "title": "kmalloc和vmalloc是分配的是内核的内存"
                },
                {
                  "title": "kmalloc保证分配的内存在物理上是连续的,vmalloc保证的是在虚拟地址空间上的连续"
                },
                {
                  "title": "内存只有在要被DMA访问的时候才需要物理上连续"
                },
                {
                  "title": "vmalloc比kmalloc要慢"
                }
              ]
            },
            {
              "title": "写时复制",
              "topics": [
                {
                  "title": "写时复制是计算机编程中的一种优化策略，它的基本思想是这样的：如果有多个应用程序需要同时访问同一块数据，那么可以为这些应用程序分配指向这块数据的指针，在每一个应用程序看来，它们都拥有这块数据的一份数据拷贝，当其中一个应用程序需要对自己的这份数据拷贝进行修改的时候，就需要将数据真正地拷贝到该应用程序的地址空间中去，也就是说，该应用程序拥有了一份真正的私有数据拷贝，这样做是为了避免该应用程序对这块数据做的更改被其他应用程序看到。这个过程对于应用程序来说是透明的，如果应用程序永远不会对所访问的这块数据进行任何更改，那么就永远不需要将数据拷贝到应用程序自己的地址空间中去。这也是写时复制的最主要的优点。"
                },
                {
                  "title": "写时复制的实现需要 MMU 的支持，MMU 需要知晓进程地址空间中哪些特殊的页面是只读的，当需要往这些页面中写数据的时候，MMU 就会发出一个异常给操作系统内核，操作系统内核就会分配新的物理存储空间，即将被写入数据的页面需要与新的物理存储位置相对应。",
                  "makers": [
                    "task-done",
                    "flag-red",
                    "priority-1",
                    "star-red"
                  ]
                },
                {
                  "title": "写时复制的最大好处就是可以节约内存。不过对于操作系统内核来说，写时复制增加了其处理过程的复杂性。"
                }
              ]
            }
          ]
        },
        {
          "title": "系统调用",
          "topics": [
            {
              "title": "概述",
              "topics": [
                {
                  "title": "受控内核入口"
                },
                {
                  "title": "处理器从用户态切入到内核态"
                },
                {
                  "title": "每个内核调用都有唯一的数字来标识"
                },
                {
                  "title": "系统调用参数通过寄存器传递"
                }
              ]
            },
            {
              "title": "系统调用函数",
              "topics": [
                {
                  "title": "应用通过c函数库调用, 发起系统调用"
                },
                {
                  "title": "c 函数wrapper 负责寄存器及调用号, 中断进入系统调用",
                  "topics": [
                    {
                      "title": "相当于rpc本地的proxy, 负责发起网络io. "
                    },
                    {
                      "title": "通过寄存器传递参数.返回值"
                    }
                  ]
                },
                {
                  "title": "内核对中断响应 ,使用system_call例程.",
                  "topics": [
                    {
                      "title": "保存寄存器"
                    },
                    {
                      "title": "检查调用编号",
                      "topics": [
                        {
                          "title": "参数中可能有用户态地址空间的地址(会检查其有效性)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "title": "system_call例程会调用额外的服务例程 实际处理 请求"
                },
                {
                  "title": "从内核栈恢复用户态下寄存器的值.讲系统调用返回值置于栈中,(修改用户态的变量的值)\"
                },
                {
                  "title": "返回外壳函数, 讲cpu切换回用户态"
                },
                {
                  "title": "如果调用失败, 外壳程序会返回一个整型值, 表明系统调用是否成功. 实际的错误值 设置在全局变量 errno"
                },
                {
                  "title": "总结",
                  "topics": [
                    {
                      "title": "调用c系统调用函数库 相当于调用系统调用函数."
                    },
                    {
                      "title": "单纯的系统调用开销是普通函数调用的20倍"
                    },
                    {
                      "title": "外壳函数 会比实际的系统调用 多干一些事情, 例如malloc 会优化空闲链表管理. "
                    }
                  ]
                }
              ]
            },
            {
              "title": "错误处理",
              "topics": [
                {
                  "title": "errno",
                  "topics": [
                    {
                      "title": "标识系统调用的错误值."
                    },
                    {
                      "title": "宏, 实际调用 一个函数. 返回该指针值. "
                    },
                    {
                      "title": "线程安全"
                    }
                  ]
                },
                {
                  "title": "perror(char * str) 打印str+实际错误err msg"
                },
                {
                  "title": "strerror(errno) 错误msg"
                },
                {
                  "title": "因为某些系统调用返回值是指针类型,无法使用int标识实际错误场景, 所以只好使用全局变量"
                }
              ]
            }
          ]
        },
        {
          "title": "Direct/O_SYNC/O_DSYNC/FSYNC 差异",
          "topics": [
            {
              "title": "[Image]"
            },
            {
              "title": "O_DIRECT 指定直接IO 跳过内核缓冲, 但是inode cache, directory cache还是有的"
            },
            {
              "title": "inode-cache用于缓冲inode，directory-cache用于缓冲目录结构数据。",
              "topics": [
                {
                  "title": "对一个文件的写入操作包括两部分，对数据本身的写入操作，以及对文件属性（metadata元数据）的写入操作(这里的文件属性包括目录，inode等)"
                }
              ]
            },
            {
              "title": "DSYNC/SYNC 只是在write 系统调用时,刷新一下内核缓冲. SYNC把内核缓冲(数据)和元数据缓冲都刷新, DSYNC 只刷新数据"
            }
          ]
        },
        {
          "title": "存储控制器层和磁盘控制器层缓冲",
          "topics": [
            {
              "title": "存储控制器层缓冲",
              "topics": [
                {
                  "title": "该层的缓冲都放在存储控制器的对应板载cache中，它的目的主要是在存储控制器层缓冲数据，避免慢速块设备读写操作影响了IO的响应时间。

当数据被fsync()等刷到存储层时，首先会发送到存储控制器层。常见的存储控制器就是Raid卡，而目前大部分的Raid卡都有1G或者更大的存储容量。这个缓冲一般为易失性的存储，通过板载电池/电容来保证该“易失性的存储”的数据在机器断电以后仍然会同步到底层的磁盘存储介质上。"
                },
                {
                  "title": "write back/write through",
                  "topics": [
                    {
                      "title": "针对是否使用缓冲，一般的存储控制器都提供write back和write through两种方式。write back方式下，操作系统提交的写数据请求直接写入到缓冲中就返回成功；write through方式下，操作系统提交的写数据请求必须要真正写到底层磁盘介质上才返回成功"
                    }
                  ]
                },
                {
                  "title": "开启Direct IO",
                  "topics": [
                    {
                      "title": "为了能够让上层的设备使用Direct IO方式来绕过raid卡，对Raid需要设置开启DirectIO方式：

/opt/MegaRAID/MegaCli/MegaCli64 -LDSetProp -Direct -Immediate -Lall -aAll"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "title": "linux io分层",
          "topics": [
            {
              "title": "分层",
              "topics": [
                {
                  "title": "系统调用层，应用程序使用系统调用指定读写哪个文件，文件偏移是多少"
                },
                {
                  "title": "文件系统层，写文件时将用户态中的buffer拷贝到内核态下，并由cache缓存该部分数据",
                  "makers": [
                    "priority-1",
                    "flag-red"
                  ],
                  "topics": [
                    {
                      "title": "会检查page cache , 建立物理设备的映射关系"
                    }
                  ]
                },
                {
                  "title": "块层，管理块设备I/O队列，对I/O请求进行合并、排序"
                },
                {
                  "title": "设备驱动层，通过DMA与内存直接交互，将数据写到磁盘",
                  "makers": [
                    "flag-red",
                    "priority-1"
                  ],
                  "topics": [
                    {
                      "title": "工作在内核态"
                    },
                    {
                      "title": "初始化完成后, 等待内核调用"
                    }
                  ]
                }
              ]
            },
            {
              "title": "[Image]"
            },
            {
              "title": "page cache和buffer cache的区别",
              "topics": [
                {
                  "title": "page cache是文件io缓存, buffer cache是块设备缓存.",
                  "topics": [
                    {
                      "title": "文件被缓存在pc, 块设备io被缓存在bc"
                    },
                    {
                      "title": "如果块设备存储文件, 则缓存会有两份(在linux之前版本)"
                    },
                    {
                      "title": "后来文件io的bc直接指向pc.避免存储两份"
                    }
                  ]
                },
                {
                  "title": "在之前没有page cache之前(linux都没有), 使用buffer cache就是为了优化块设备io",
                  "topics": [
                    {
                      "title": "可以理解buffer cache是访问磁盘设备时,创建的一块内存.  最基本的cache映射单元不像page cache一样便于管理.(page 页灭有数据, 则从磁盘读取写入到该页.)"
                    },
                    {
                      "title": "不关心是否有文件系统存在.(文件系统元数据会缓存在buffer cache)"
                    }
                  ]
                },
                {
                  "title": "page cache 讲具体的物理页 和磁盘扇区关联.(inode???)",
                  "topics": [
                    {
                      "title": "这样实际上讲文件io时,磁盘和内存映射起来. "
                    },
                    {
                      "title": "也就是说cache管理成为内存管理一部分"
                    }
                  ]
                },
                {
                  "title": "page cache的大小没有限制",
                  "topics": [
                    {
                      "title": "受限于物理内存"
                    }
                  ]
                }
              ]
            },
            {
              "title": "块设备和流(字符)设备",
              "topics": [
                {
                  "title": "块设备",
                  "topics": [
                    {
                      "title": "通常是存储设备，它们以固定大小的块提供数据的读写操作",
                      "topics": [
                        {
                          "title": "，软盘和诸如DVD-ROM和CD-ROM的光盘驱动器"
                        }
                      ]
                    },
                    {
                      "title": "阻塞设备通常一次读取或写入整个块。此外，大多数文件系统都基于块设备"
                    },
                    {
                      "title": "块设备的优点是它提供了更少的引脚来访问数据; 但是，它需要实现缓冲机制以加速读写访问期间的访问",
                      "topics": [
                        {
                          "title": "不支持单独读取某一个字符"
                        }
                      ]
                    }
                  ]
                },
                {
                  "title": "流设备",
                  "topics": [
                    {
                      "title": "字符设备一次传输一个字符的数据"
                    },
                    {
                      "title": "字符设备的主要优点是I / O可以直接在设备和用户之间完成"
                    },
                    {
                      "title": "例如键盘等"
                    }
                  ]
                }
              ]
            },
            {
              "title": "c函数库",
              "topics": [
                {
                  "title": "stdio setvbuf",
                  "topics": [
                    {
                      "title": "setvbuf 支持设置以下几种io模式"
                    },
                    {
                      "title": "不对io缓冲"
                    },
                    {
                      "title": "对流设备可以 按照行缓冲. 遇到换行符 清空缓冲区",
                      "makers": [
                        "flag-red",
                        "priority-1"
                      ],
                      "topics": [
                        {
                          "title": "标准输入等",
                          "makers": [
                            "priority-1"
                          ]
                        }
                      ]
                    },
                    {
                      "title": "全缓冲IO. 读写数据大小与缓冲区大小相同"
                    },
                    {
                      "title": "注意: 并不是read, write系统调用采用这几种模式, 而是基于read/write的函数库 使用以上几种模式, 例如 fputs, fgets()等"
                    },
                    {
                      "title": "文件io默认是块缓冲."
                    }
                  ]
                },
                {
                  "title": "stdio fflush",
                  "topics": [
                    {
                      "title": "刷新 某一个流的缓冲区."
                    },
                    {
                      "title": "fflush(FILE * stream)"
                    }
                  ]
                },
                {
                  "title": "混合使用库函数和系统调用",
                  "topics": [
                    {
                      "title": "fdopen",
                      "topics": [
                        {
                          "title": "可以将一个文件描述符 转化为文件流方式访问.(字符)",
                          "topics": [
                            {
                              "title": "例如fgets等."
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "title": "fileno",
                      "topics": [
                        {
                          "title": "将流转化为文件描述符. ",
                          "topics": [
                            {
                              "title": "系统调用都是指定文件描述符访问."
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "title": "如何理解文件描述符和流(FILE)",
                      "topics": [
                        {
                          "title": "文件描述符面向的是系统调用等比较底层的使用"
                        },
                        {
                          "title": "流基于文件描述符,是一层更高的抽象. 提供了读取文件,或某些设备的 库函数,并且提供了一些缓冲策略. "
                        },
                        {
                          "title": "stdio提供的库函数大部分都是基于流的,已经存在了缓冲(也可以指定不使用用缓冲)"
                        }
                      ]
                    },
                    {
                      "title": "一个进程会默认有三个流,标准输入,输出, 错误输出, 这些流都指向了具体的设备. "
                    }
                  ]
                }
              ]
            },
            {
              "title": "如何才算数据安全落盘",
              "topics": [
                {
                  "title": "两种类型",
                  "topics": [
                    {
                      "title": "所有对磁盘的数据部分修改全部落盘."
                    },
                    {
                      "title": "所有对磁盘元数据信息及数据信息全部落盘"
                    },
                    {
                      "title": "但是这并不代表 一定落盘了,可能仅仅是 写入到磁盘设备的缓存中. "
                    }
                  ]
                },
                {
                  "title": "刷新内核缓冲",
                  "topics": [
                    {
                      "title": "fsync(int fd)",
                      "topics": [
                        {
                          "title": "将fd管理的所有元数据和数据都刷新到磁盘",
                          "topics": [
                            {
                              "title": "对于元数据信息不太敏感,例如文件大小,最后修改时间等操作,可以使用fdatasync. 减少磁盘io次数.(或者延迟调用fsync.)"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "title": "fdatasync ",
                      "topics": [
                        {
                          "title": "将fd管理的所有数据新秀全部刷新到磁盘"
                        }
                      ]
                    },
                    {
                      "title": "sync_file_range",
                      "topics": [
                        {
                          "title": "指定刷新文件的某一块区域, 并且可控制该系统调用是否阻塞.  如果非阻塞,则立即返回"
                        },
                        {
                          "title": "存储设备写入时也会有排队机制. 如果排队则会发生阻塞",
                          "topics": [
                            {
                              "title": "除了缓冲还会排队, 排队的都是实际需要需改的数据"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "title": "linux pdflush 定时检查30s内未显示调用t同步刷盘动作的内核缓冲, 将其刷新到磁盘. 这个时间间隔可以指定."
                    },
                    {
                      "title": "物理内存不足时, 内核也会刷新内核缓冲"
                    },
                    {
                      "title": "stage page write 问题导致写page cache 阻塞",
                      "makers": [
                        "priority-1",
                        "task-done"
                      ],
                      "topics": [
                        {
                          "title": "Stable page write"
                        },
                        {
                          "title": "使用内核缓冲情况下, 读写文件时，首先会使得相应的文件缓存页“变脏”。即使缓存页稍后会通过OS的回写机制被持久化到磁盘文件，但是在内存中使缓存页变脏的过程，由于“stable page write”仍然会受到页竞争的影响。在“stable page write”下，如果某页正处于OS回写过程中，那么对该页的write()调用就不得不等待回写完成。为了避免只有一部分新页被持久化到磁盘上，内核会锁定该页以确保数据一致"
                        }
                      ]
                    }
                  ]
                },
                {
                  "title": "open",
                  "topics": [
                    {
                      "title": "指定打开模式为O_SYNC,则后续所有的写入都会同步刷新内核缓冲.",
                      "topics": [
                        {
                          "title": "也可指定只刷新数据信息,"
                        },
                        {
                          "title": "同步刷新,一定要调整用户态的缓冲,避免频繁调用write . "
                        }
                      ]
                    },
                    {
                      "title": "指定打开模式为O_DIRECT",
                      "makers": [
                        "priority-1",
                        "flag-red"
                      ],
                      "topics": [
                        {
                          "title": "放弃了操作系统对文件IO 的优化, 告诉操作系统对该fd不执行任何缓冲操作. 完全由应用程序自己控制缓冲,如何操作磁盘"
                        },
                        {
                          "title": "例如数据库系统, 自成体系的缓冲, 数据同步,一致性"
                        },
                        {
                          "title": "由于直接操作磁盘设备, 所以对于块设备文件. 要保证用户态传递的缓冲区是磁盘块大小的整数倍."
                        },
                        {
                          "title": "数据传输起点也是块设备整数倍",
                          "topics": [
                            {
                              "title": "否则报错."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "title": "向内核建议如何优化IO",
              "topics": [
                {
                  "title": "IO优化方式",
                  "topics": [
                    {
                      "title": "预读取"
                    },
                    {
                      "title": "在成簇磁盘块执行IO"
                    },
                    {
                      "title": "语序同一个文件的多个进程共享告诉缓冲区的缓冲区"
                    },
                    {
                      "title": "操作系统会保证 缓冲和磁盘文件的数据一致性. (例如本应该读取缓存, 但是实际读取了文件.)",
                      "topics": [
                        {
                          "title": "但是如果同时对一个文件 使用page cache和直接io,会导致数据不一致."
                        }
                      ]
                    }
                  ]
                },
                {
                  "title": "POSIX_fadvise",
                  "topics": [
                    {
                      "title": "无建议, 默认预读128k"
                    },
                    {
                      "title": "预计从文件低偏移到高偏移读取数据,预读变成256k"
                    },
                    {
                      "title": "指定将来预读哪些范围数据. linux将提前预读这些数据"
                    },
                    {
                      "title": "指定将来不会读哪些数据. 将这些数据可以刷盘"
                    }
                  ]
                }
              ]
            },
            {
              "title": "mmap",
              "topics": [
                {
                  "title": "将文件映射到内存, 实际数据存储在page cache中, 但是mmap会返回用户态地址空间的地址, 该地址被内核映射到page cache上"
                },
                {
                  "title": "其他使用,可以参考linux 进程间通信方式"
                },
                {
                  "title": "msync",
                  "topics": [
                    {
                      "title": "同步mmap 映射的 page cache数据到 磁盘"
                    }
                  ]
                },
                {
                  "title": "具体的文件系统会支持mmap, 将文件映射到具体的页面, 同时负责读取数据到具体的物理页"
                }
              ]
            }
          ]
        },
        {
          "title": "文件IO 加锁"
        },
        {
          "title": "文件IO ",
          "topics": [
            {
              "title": "open",
              "topics": [
                {
                  "title": "支持一下操作"
                },
                {
                  "title": "文件不存在,则创建, 已存在则返回失败
无系统缓冲的IO
同步IO
非阻塞IO
如果存在,则清空该文件(截断)
追加写
独占访问,如果已经被打开,则返回错误",
                  "topics": [
                    {
                      "title": "虽然支持非阻塞, 但是文件IO 只能是非阻塞,不存在阻塞.(一直处于就绪)"
                    },
                    {
                      "title": "管道和socket不支持open,可以通过fcntl NONBLOCK 设置fd属性."
                    },
                    {
                      "title": "打开文件时, 使用非阻塞,如果无法立即打开, 则返回,否则使用阻塞模式,会被阻塞"
                    },
                    {
                      "title": "如果对文件加锁, 当读取或写入时,如果以阻塞方式open,则会被阻塞住",
                      "topics": [
                        {
                          "title": "只有对文件加锁时,才会有可能阻塞,单纯读写缓冲区miss 不会阻塞"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "title": "read",
              "topics": [
                {
                  "title": "使用文件句柄打开"
                },
                {
                  "title": "使用buffer, size 传递数据. (系统调用负责将数据传输到用户态buffer)"
                },
                {
                  "title": "不一定打开文本数据"
                },
                {
                  "title": "默认字符串结尾为 '\0'",
                  "topics": [
                    {
                      "title": "如果读取的数据到了尾部, 并且要打印字符串, 需要在字符串后加 '\0'"
                    }
                  ]
                }
              ]
            },
            {
              "title": "fcntl",
              "topics": [
                {
                  "title": "可以通过fd修改其flag ,例如append模式等. "
                }
              ]
            },
            {
              "title": "write",
              "topics": [
                {
                  "title": "写入成功并不代表写入磁盘成功"
                },
                {
                  "title": "返回值表示写入成功的数值(系统调用成功的值,可能写入缓存成功)"
                },
                {
                  "title": "使用append模式写入时,可以保证原子性",
                  "topics": [
                    {
                      "title": "操作系统保证"
                    },
                    {
                      "title": "可以多线程/多进程 指定追加写"
                    }
                  ]
                },
                {
                  "title": "可在文件尾部任意位置写入数据. 在实际写入位置和原结尾位置 可以存在0 填充的空洞. 但是不实际占用磁盘存储, 而后次空洞还是可以继续写入, 注意这个0填充不是写进去的,而是lseek指定位置",
                  "topics": [
                    {
                      "title": "子主题 1"
                    }
                  ]
                }
              ]
            },
            {
              "title": "lseek",
              "topics": [
                {
                  "title": "对于特定的文件描述符内核会记录该 fd文件偏移量"
                },
                {
                  "title": "文件描述符指定read, write操作的起始位置"
                }
              ]
            },
            {
              "title": "文件描述符和文件句柄等",
              "topics": [
                {
                  "title": "三个数据结构",
                  "topics": [
                    {
                      "title": "进程级的文件描述表",
                      "topics": [
                        {
                          "title": "fd",
                          "topics": [
                            {
                              "title": "可被复制,复制后共享同一个文件句柄,使用相同的文件偏移量"
                            },
                            {
                              "title": "两个指向同一个文件句柄的fd共享一个偏移量, 当追加写得时候, 是不会互相覆盖的.(不需要其他同步措施)"
                            },
                            {
                              "title": "使用dup, fork 都会共享",
                              "topics": [
                                {
                                  "title": "fork后,子进程继承(复制)父进程的fd"
                                }
                              ]
                            },
                            {
                              "title": "共享的是文件句柄, 由fd 1 复制出fd2 , 但是是两个文件描述符, 有自己单独的flag,即 打开文件状态"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "title": "系统级的打开文件表",
                      "topics": [
                        {
                          "title": "文件句柄",
                          "topics": [
                            {
                              "title": "一个文件句柄一个文件偏移量 open一次,一个文件句柄"
                            },
                            {
                              "title": "open多次,会产生多个文件句柄. 所以open两次追加写, 会存在覆盖写得问题",
                              "topics": [
                                {
                                  "title": "所以可以看到两个编辑器打开相同文件, 互相看不到变化.(可以重新加载.这种场景进程会认为自己应该独占. 否则会出现覆盖写问题,覆盖写之后,就会出现内存的文件内容 可能和实际文件的内容不同的场景,出现诡异的问题)"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "title": "文件系统的i-node表",
                      "topics": [
                        {
                          "title": "具体条目标识了, 文件类型,指向文件持有锁列表的指针. 文件的各个属性"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "title": "pread, pwrite",
              "topics": [
                {
                  "title": "可指定偏移量位置写入,不需要read,前再调用lseek.移动文件指针"
                },
                {
                  "title": "当多线程写时,如果通过lseek的方式,先移动再写入,会存在 竞态条件,多个线程同时移动指针. 写入,互相认为自己写对了"
                },
                {
                  "title": "可以保证移动指针和写入是一个原子操作,不会被其他线程中断.",
                  "topics": [
                    {
                      "title": "如果不是追加写,还是需要额外的同步机制.捕获到其他线程对文件的修改."
                    }
                  ]
                }
              ]
            },
            {
              "title": "readv",
              "topics": [
                {
                  "title": "分散读取.即指定多个缓冲区(缓冲区指针,和长度) . 内核会将数据依次写入各个缓冲区"
                },
                {
                  "title": "这个操作是原子的. 即共享一个文件偏移,也不会出错.(读取的数据时连续的)"
                },
                {
                  "title": "preadv",
                  "topics": [
                    {
                      "title": "指定文件偏移量的分散读取"
                    }
                  ]
                }
              ]
            },
            {
              "title": "writev",
              "topics": [
                {
                  "title": "分散写入, 即指定多个缓冲区,内核会将数据依次写入各个缓冲区"
                },
                {
                  "title": "操作原子,不会导致写入中间, 偏移量被修改"
                },
                {
                  "title": "检查返回值, 实际写入多少. "
                },
                {
                  "title": "java提供的 分散写入,分散读取 就是基于这个系统调用"
                },
                {
                  "title": "pwrite指定文件偏移量的分散写入"
                }
              ]
            },
            {
              "title": "truncate",
              "topics": [
                {
                  "title": "可指定文件大小进行截断. 当指定过大时,会补充空字节,或文件空洞."
                },
                {
                  "title": "不需要文件描述符"
                }
              ]
            },
            {
              "title": "mkstemp",
              "topics": [
                {
                  "title": "创建临时文件"
                },
                {
                  "title": "int mkstemp(char * templates)",
                  "topics": [
                    {
                      "title": "templates指定路径名,最后六位为xxxxxx"
                    }
                  ]
                },
                {
                  "title": "独占并读写该文件"
                }
              ]
            }
          ]
        }
      ]
    },
    "structure": "org.xmind.ui.map.clockwise"
  }
]