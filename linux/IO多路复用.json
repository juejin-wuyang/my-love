[
  {
    "title": "画布 1",
    "topic": {
      "title": "IO 多路复用",
      "topics": [
        {
          "title": "IO多路复用",
          "topics": [
            {
              "title": "通过一种机制，一个进程可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，pselect，poll，epoll本质上都是同步I/O"
            },
            {
              "title": "select",
              "topics": [
                {
                  "title": "调用后select函数会阻塞，直到有描述符就绪（有数据 可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以通过遍历fdset，来找到就绪的描述符。"
                },
                {
                  "title": "缺点",
                  "topics": [
                    {
                      "title": "通过设置或者检查存放fd标志位的数据结构来进行下一步处理, 实际是通过扫描实现的, 即采用轮训实现的. 效率特别低"
                    },
                    {
                      "title": "单个进程能够监视的文件描述符的数量存在最大限制"
                    },
                    {
                      "title": "需要维护一个用来存放大量fd的数据结构，这样会使得用户空间和内核空间在传递该结构时复制开销大。"
                    },
                    {
                      "title": "可能被信号中断虚假唤醒."
                    },
                    {
                      "title": "每次调用都会检查所有的文件描述符,当数组较大时,非常耗费性能, 同时 数组在内核态和用户态传递也十分耗费性能. 当结果返回时, 必须一个个检查是否 处于就绪态. 十分繁琐., poll也有这个缺点"
                    }
                  ]
                },
                {
                  "title": "API 说明",
                  "topics": [
                    {
                      "title": "readfds, writefds, exceptfds, timeout参数",
                      "topics": [
                        {
                          "title": "不需要指定具体的fd,只需要传递 初始化为0的fd数组, 内核会返回该进程的就绪文件描述符."
                        },
                        {
                          "title": "如果在循环中使用select ,则舒服重新初始化readfds等."
                        },
                        {
                          "title": "如果需要监听fd 非常大的描述符, 那么fd数组 的长度也要一样长. 即fds[0]是 fd=0的就绪状态"
                        }
                      ]
                    },
                    {
                      "title": "返回值为0 代表因为超时返回. 正数 代表就绪的描述符个数"
                    },
                    {
                      "title": "不一定是socket.也可以支持文件描述符"
                    }
                  ]
                }
              ]
            },
            {
              "title": "poll",
              "topics": [
                {
                  "title": "poll本质上和select没有区别，它将用户传入的数组拷贝到内核空间"
                },
                {
                  "title": "没有最大连接数的限制，原因是它是基于链表来存储的"
                },
                {
                  "title": "缺点",
                  "topics": [
                    {
                      "title": "在用户态和内核态 存在大量的复制"
                    },
                    {
                      "title": "同时连接的大量客户端在一时刻可能只有很少的处于就绪状态，因此随着监视的描述符数量的增长，其效率也会线性下降。"
                    }
                  ]
                }
              ]
            },
            {
              "title": "信号驱动IO",
              "topics": [
                {
                  "title": "当有输入到达指定的文件描述符时, 内核向请求数据的进程发送一个信号. 当IO操作可执行时, 通过接受信号获得通知, 接受信号的时机发生在系统调用即将返回时, 或线程切换时."
                },
                {
                  "title": "比epoll要复杂,要处理信号. 不能指定检查的事件类型.(读写事件)"
                },
                {
                  "title": "使用步骤",
                  "topics": [
                    {
                      "title": "[Image]"
                    },
                    {
                      "title": "安装信号处理例程",
                      "topics": [
                        {
                          "title": "SIGIO 信号"
                        }
                      ]
                    },
                    {
                      "title": "设定fd属主",
                      "topics": [
                        {
                          "title": "使用fcntl (fd, F_SETOWN, PID)"
                        },
                        {
                          "title": "告诉内核fd就绪信号通知给哪个进程"
                        }
                      ]
                    },
                    {
                      "title": "设置O _NONBLOCK 非阻塞IO, O_ASYNC 设置信号驱动IO",
                      "topics": [
                        {
                          "title": "fcntl(fd, F_SETFL, O_NONBLOCK|O_ASYNC)"
                        },
                        {
                          "title": "设置fd flag"
                        }
                      ]
                    },
                    {
                      "title": "默认是边缘触发, 即只通知一次. "
                    }
                  ]
                },
                {
                  "title": "实时可靠信号.可以支持排队, 但是可能超出队列长度. 导致io就绪状态丢失"
                }
              ]
            },
            {
              "title": "epoll",
              "topics": [
                {
                  "title": "epoll使用“事件”的就绪通知方式，通过epoll_ctl注册fd，一旦该fd就绪，内核就会采用类似callback的回调机制来激活该fd，epoll_wait便可以收到通知。",
                  "topics": [
                    {
                      "title": "支持管道, socket, FIFO , 终端,设备"
                    },
                    {
                      "title": "不支持文件操作, 会报错"
                    }
                  ]
                },
                {
                  "title": "没有最大并发连接的限制",
                  "topics": [
                    {
                      "title": "这个限制非常大,由于epoll关心的fd占用内核地址空间, 且无法被换出到交换空间, 所以实际最大数量受内存控制.内核会自动计算这个值"
                    }
                  ]
                },
                {
                  "title": "效率提升，不是轮询的方式，不会随着FD数目的增加效率下降。
只有活跃可用的FD才会调用callback函数；即Epoll最大的优点就在于它只管你“活跃”的连接，跟连接总数无关.
此在实际的网络环境中，Epoll的效率就会远远高于select和poll"
                },
                {
                  "title": "两种模式",
                  "topics": [
                    {
                      "title": "LT模式",
                      "topics": [
                        {
                          "title": "内核通知一个描述符是否就绪,如果不做任何操作,内核下次会继续通知",
                          "topics": [
                            {
                              "title": "大部分使用这种方式."
                            },
                            {
                              "title": "可以循环调用,每次都会通知就绪"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "title": "ET模式",
                      "topics": [
                        {
                          "title": "描述符就绪后, 如果你对其不进行处理,不会再次发送 就绪的通知.直到你处理为止."
                        }
                      ]
                    },
                    {
                      "title": "epoll支持对某一个fd进行水平或边缘触发.不用针对所有"
                    }
                  ]
                },
                {
                  "title": "API",
                  "topics": [
                    {
                      "title": "epoll_create",
                      "topics": [
                        {
                          "title": "创建一个epoll实例, 返回epoll对应的文件描述符"
                        }
                      ]
                    },
                    {
                      "title": "epoll_ctl",
                      "topics": [
                        {
                          "title": "修改epoll fd关心的文件描述符列表.可以添加, 删除,修改关注事件"
                        },
                        {
                          "title": "可以由其他线程注册关心的事件.fd等.即时生效,线程安全"
                        }
                      ]
                    },
                    {
                      "title": "epoll_wait",
                      "topics": [
                        {
                          "title": "可被信号虚假唤醒"
                        },
                        {
                          "title": "epfd, 接受返回值的fd数组, timeout. 返回就绪态最大的值."
                        }
                      ]
                    }
                  ]
                },
                {
                  "title": "epoll 有没有使用mmap 减少就绪列表在内核态和用户态拷贝",
                  "topics": [
                    {
                      "title": "答案是没有, 接受就绪列表的数组 是用户态初始好,传递过去的,如果mmap应该是内核 初始化. 返回给用户态 指针."
                    },
                    {
                      "title": "由于fd涉及到内核数据结构, 内核不会轻易和用户态共享的,对于文件而言, 内核是可以mmap减少内核态到用户态拷贝,毕竟只是page cache内核缓冲区而已"
                    }
                  ]
                },
                {
                  "title": "epoll原理",
                  "topics": [
                    {
                      "title": "内核会创建一个i-node并 打开文件描述,即文件句柄. 然后基于文件句柄创建一个文件描述符. fork,dup可以复制这个文件描述符. 可以同步修改兴趣列表.等."
                    },
                    {
                      "title": "只有文件句柄的所有文件描述符,都close,实际文件句柄才会关闭被清除,否则其他未关闭的fd一直可以用epoll_wait"
                    }
                  ]
                }
              ]
            },
            {
              "title": "IO 多路复用只能应用于网络IO吗?",
              "topics": [
                {
                  "title": "IO 多路复用 是作用于文件描述符上的,包括 普通文件, 终端,伪终端.网络"
                }
              ]
            },
            {
              "title": "水平触发和边缘触发",
              "topics": [
                {
                  "title": "水平触发即使本次select, poll, epoll返回就绪描述符没有得到处理,下次依然会通知. 边缘触发只通知一次,不及时处理下次不会触发."
                },
                {
                  "title": "select,poll支持水平触发. 信号驱动IO 只支持边缘触发."
                },
                {
                  "title": "水平触发注意 写死循环. 因为写事件可能一直都满足(写缓冲区不满),所以一直处理,一般在读事件之后注册写事件, 写事件完成后, 注销写事件.  或者有循环,或者其他事件驱动 负责注册写事件.等到需要写的时候再注册写.写完后取消. 如果写到一般不满足了, 需要保存未写成功的数据,下次满足了接着写."
                }
              ]
            },
            {
              "title": "性能",
              "topics": [
                {
                  "title": "在10个fd时, select, poll, epoll性能接近, 大于100后,性能相差 数量级可在1000倍"
                },
                {
                  "title": "epoll不要每次都重新监听fd, epoll不需要每次就绪列表返回,再遍历一遍,减少了大量的数据拷贝及遍历"
                },
                {
                  "title": "epoll分离了io多路复用的步骤, 将创建epoll,管理,监听分离开, 比单纯的select 要灵活"
                }
              ]
            }
          ]
        },
        {
          "title": "文件IO 和 网络IO ",
          "topics": [
            {
              "title": "什么是阻塞IO",
              "topics": [
                {
                  "title": "[Image]"
                },
                {
                  "title": "等待数据就绪的时候 进程可能被挂起."
                }
              ]
            },
            {
              "title": "文件IO会被阻塞吗?",
              "topics": [
                {
                  "title": "不会,文件IO 数据一致在传输,不存在 未就绪状态."
                },
                {
                  "title": "当读到末尾,错误 read也会立即返回."
                }
              ]
            },
            {
              "title": "网络IO",
              "topics": [
                {
                  "title": "存在缓冲区空或者满的场景. 需要等待数据就绪"
                }
              ]
            }
          ]
        },
        {
          "title": "accept & epoll 的静群效应",
          "topics": [
            {
              "title": "accept 惊群效应",
              "topics": [
                {
                  "title": "当多个进程在同一个fd上accept时, 内核会将这些进程加入等待队列,等到条件满足,全部唤醒,导致静群效应.实际只会有一个进程成功."
                },
                {
                  "title": "通过只唤醒一个进程(加标记位).避免静群效应.linux 2.6之后已优化"
                }
              ]
            },
            {
              "title": "epoll 惊群效应",
              "topics": [
                {
                  "title": "epoll在fork之前创建",
                  "topics": [
                    {
                      "title": "epoll_create fd被多个子进程共享. 通过类似于accept的方式,只唤醒一个进程解决这个问题"
                    }
                  ]
                },
                {
                  "title": "epoll在fork之后创建",
                  "topics": [
                    {
                      "title": "当所有进程共享一个fd时, 由于accept接受到的fd 读写事件只能一直转发给同一个进程(这个fd没有共享), 但是共享的epoll fd时不知道的.所以fork之前创建epoll 只需要负责accept事件. 得到accept后,需要单独使用epoll 监听读写事件.此时需要两个epoll 线程."
                    },
                    {
                      "title": "当考虑epoll 直接在fork之后创建.",
                      "topics": [
                        {
                          "title": "
多个epoll 并没有实现共享,每一个epoll 都会存在自己的 就绪列表, 但是事实上这些就绪列表都是在监听同一个port上的socket fd, 所以只应该有一个进程处理这些accept fd. 依然需要同步机制"
                        },
                        {
                          "title": "当多个进程共享一个epoll fd时, 是共享一块epoll 内存,这块内存(红黑树)专门存放就绪链表. 当满足时,会只唤醒一个进程. 当多个epoll 时,就会存在 多个epoll fd,多个就绪链表. 当然这些就绪链表都会被就绪.. 但是实际只能有一个进程应该获取到这些就绪链表. 一般是由应用层自己加锁完成.所以一般epoll 只有一个进程监听链接最好."
                        }
                      ]
                    }
                  ]
                },
                {
                  "title": "此时发现epoll 即需要处理accept, 又需要处理 read, write. 虽然epoll 在fork 之前,可以避免accept类似的静群,但是无法处理read/write事件, (需要进程自己创建epoll 监听自己accpet的fd ,此时可能又引入一个线程负责这个epoll), 另外一个机制是一劳永逸  通过一把锁,每个进程有自己的epoll ,(需要控制避免多个进程拿到同样的accept,因为多个epoll linux无法解决惊群), 监听到accept,然后注册读写. ",
                  "topics": [
                    {
                      "title": "但是这种机制.多个进程上的read write fd无法实现并发
所以锁的粒度要细, 不能在读写事件上加锁. 而是在accept事件上加锁",
                      "makers": [
                        "priority-1",
                        "task-done",
                        "star-red"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "title": "epoll 原理",
              "topics": [
                {
                  "title": "当内核初始化epoll时，会开辟一块内核高速cache区，用于安置我们监听的socket，这些socket会以红黑树的形式保存在内核的cache里，以支持快速的查找，插入，删除．同时，建立了一盒list链表，用于存储准备就绪的事件．所以调用epoll_wait时，在timeout时间内，只是简单的观察这个list链表是否有数据，如果没有，则睡眠至超时时间到返回；如果有数据，则在超时时间到，拷贝至用户态events数组中．"
                },
                {
                  "title": "就绪list链表是怎么维护",
                  "topics": [
                    {
                      "title": "当我们执行epoll_ctl时，除了把socket放到epoll文件系统里file对象对应的红黑树上之外，还会给内核中断处理程序注册一个回调函数，告诉内核，如果这个句柄的中断到了，就把它放到准备就绪list链表里。所以，当一个socket上有数据到了，内核在把网卡上的数据copy到内核中后就来把socket插入到准备就绪链表里了。"
                    }
                  ]
                },
                {
                  "title": "LT 和 ET的区别LT 可以就绪多次,知道你处理完. ET只通知一次, 是因为ET 返回后,将就绪列表清空. LT 还做了额外的检查"
                }
              ]
            }
          ]
        }
      ]
    },
    "structure": "org.xmind.ui.map.unbalanced"
  }
]