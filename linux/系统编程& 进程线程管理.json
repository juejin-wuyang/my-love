[
  {
    "title": "画布 1",
    "topic": {
      "title": "系统编程& 进程线程管理",
      "topics": [
        {
          "title": "创建进程",
          "topics": [
            {
              "title": "fork",
              "topics": [
                {
                  "title": "父进程创建子进程",
                  "topics": [
                    {
                      "title": "子进程获得父进程的栈,数据段, 堆,代码段"
                    }
                  ]
                },
                {
                  "title": "一次调用,两次返回,父子进程都从fork处返回.",
                  "topics": [
                    {
                      "title": "执行顺组无法保证"
                    }
                  ]
                },
                {
                  "title": "共享",
                  "topics": [
                    {
                      "title": "文件句柄",
                      "topics": [
                        {
                          "title": "指向同一个文件句柄, 共享同一个文件偏移"
                        },
                        {
                          "title": "但是依然需要同步机制 写相同的文件. 同时追加写文件,不会互相覆盖"
                        }
                      ]
                    },
                    {
                      "title": "代码段",
                      "topics": [
                        {
                          "title": "指向相同的物理页"
                        }
                      ]
                    },
                    {
                      "title": "数据段",
                      "topics": [
                        {
                          "title": "基于写时复制, 避免fork复制大量内存"
                        },
                        {
                          "title": "包括stdio等用户态数据缓冲池. 所以在 fork前,最好fflush"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "title": "execve",
              "topics": [
                {
                  "title": "指定某个路径的可执行程序,执行, 并替换该进程的代码段, 堆栈等."
                }
              ]
            }
          ]
        },
        {
          "title": "进程终止",
          "topics": [
            {
              "title": "exit执行动作",
              "topics": [
                {
                  "title": "调用退出钩子程序(atexit, on_exit程序)"
                },
                {
                  "title": "刷新Stdio缓冲区"
                },
                {
                  "title": "调用_exit"
                },
                {
                  "title": "不要使用return 退出, return退出的实现 没有规范, 实际也会调用exit但是status返回值不确定"
                },
                {
                  "title": "关闭信号量, mmap的映射"
                }
              ]
            },
            {
              "title": "_exit是系统调用, exit是c函数库"
            },
            {
              "title": "可通过信号处理函数,注册某个信号处理.",
              "topics": [
                {
                  "title": "可忽略"
                },
                {
                  "title": "可重新抛出"
                },
                {
                  "title": "信号处理函数中如果使用系统调用,可能会覆盖全局错误no. 所以需要 在信号处理入口处, 保存errno.然后返回时,恢复errno"
                },
                {
                  "title": "信号处理函数发生在系统调用即将返回时, 有自己的中断上下文"
                }
              ]
            },
            {
              "title": "僵尸进程",
              "topics": [
                {
                  "title": "子进程退出后,虽然会释放该进程的申请的资源,但是为了保证父进程可以通过wait获取到该子进程退出时(死因),依然会在内核进程表中记录该进程的一条记录. 标识其中止状态.资源使用数据等."
                },
                {
                  "title": "父进程调用wait信息之后, 内核会将该信息清除.如果父进程没有调用wait就退出了. 则init会自动调用wait"
                },
                {
                  "title": "如果父进程不管这些僵尸进程,则内核的进程表会膨胀."
                }
              ]
            },
            {
              "title": "子进程退出时,会给父进程发送SIGCHILD信号."
            }
          ]
        },
        {
          "title": "监控进程",
          "topics": [
            {
              "title": "waitpid",
              "topics": [
                {
                  "title": "指定某个子进程,所有子进程, 任意一个子进程的结束"
                },
                {
                  "title": "可以获取进程如何退出的, 是通过exit, 信号灯"
                }
              ]
            }
          ]
        },
        {
          "title": "clone ",
          "topics": [
            {
              "title": "和fork一样创建新进程,但是参数更多,可以创建轻型进程 -> 线程",
              "topics": [
                {
                  "title": "和fork使用同一个函数实现do_fork"
                }
              ]
            },
            {
              "title": "包括参数",
              "topics": [
                {
                  "title": "执行子函数 "
                },
                {
                  "title": "进程栈",
                  "topics": [
                    {
                      "title": "通过clone 创造线程， 怎么在线程退出后回收栈空间",
                      "makers": [
                        "priority-1",
                        "flag-red",
                        "symbol-question"
                      ],
                      "topics": [
                        {
                          "title": "没有额外的信号通知机制告诉一个线程,某个线程退出"
                        },
                        {
                          "title": "只有阻塞的join.显然不太合适"
                        },
                        {
                          "title": "答案",
                          "topics": [
                            {
                              "title": "一个是通过创建线程的线程join , 然后得到线程退出, 释放栈",
                              "topics": [
                                {
                                  "title": "只能有被一个线程join. 也只应该被join一次. "
                                },
                                {
                                  "title": "不一定只有创建线程才可以join,其他线程也可以."
                                },
                                {
                                  "title": "如果该线程既没有被join,也没有被detach,会成为僵尸线程.",
                                  "topics": [
                                    {
                                      "title": "始终记住linux不区分进程线程.,,一视同仁"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "title": "释放过程",
                              "topics": [
                                {
                                  "title": "（1） 将栈内存块从 stack_used 取下放入 stack_cache 列表中。
(2) 释放 stack_cache 中已结束线程的栈内存块。这里是否已结束是根据 pthread tid 位是否被清零来业判断的。(3) 线程结束时， 由内核清除标志位（tid）， 这一步骤是由内核完成的，当线程结束时，内核会自动将tid清零，这就意味着一旦 tid 被清零就意味着线程已经结束"
                                },
                                {
                                  "title": "线程会自己检查如果本线程被分离了,则自动为其释放栈信息等.",
                                  "topics": [
                                    {
                                      "title": "线程clone的子函数 是对用户传入的子函数再次封装"
                                    },
                                    {
                                      "title": "exit会直接退出进程. 这种场景不需要处理, 那么用户传入的子函数一定是return返回的,一定可以执行到
Glibc的清理部分."
                                    }
                                  ]
                                },
                                {
                                  "title": "如何detach",
                                  "topics": [
                                    {
                                      "title": "（1）在线程创建时将其属性设为分离状态(detached)；"
                                    },
                                    {
                                      "title": "（2）在线程创建后将其属性设为分离的(detached)。"
                                    },
                                    {
                                      "title": "detach后的线程不应该被调用join"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "title": "向下增长,一般的数组访问都是++. 栈的访问都是--,所以传递给栈的数组地址
是高位地址."
                    }
                  ]
                },
                {
                  "title": "参数"
                },
                {
                  "title": "ptid, tls, ctid"
                },
                {
                  "title": "flags",
                  "topics": [
                    {
                      "title": "可共享打开描述符,共享IO 上下文, 命名空间, 挂载命名空间, 描述线程本地存储. 共享虚拟内存"
                    }
                  ]
                }
              ]
            },
            {
              "title": "线程共享了哪些东西",
              "topics": [
                {
                  "title": "文件描述符"
                },
                {
                  "title": "文件系统"
                },
                {
                  "title": "信号处理函数也是共享的"
                },
                {
                  "title": "共享虚拟内存",
                  "topics": [
                    {
                      "title": "mmap, munmap"
                    },
                    {
                      "title": "不同于fork的写实拷贝"
                    }
                  ]
                },
                {
                  "title": "线程组",
                  "topics": [
                    {
                      "title": "共享同一个进程ID ",
                      "topics": [
                        {
                          "title": "也就是线程组ID"
                        }
                      ]
                    },
                    {
                      "title": "每个线程有自己的TID ",
                      "topics": [
                        {
                          "title": "getTID ,java的tid不是自创的."
                        }
                      ]
                    },
                    {
                      "title": "线程组首个线程TID 和进程TGID 相同"
                    },
                    {
                      "title": "任何一个线程执行了exec, 都会终止其他线程,而本线程成为新进程的首个线程."
                    },
                    {
                      "title": "如果任何一个子线程调用了fork创建子线程,那么其他线程都可以使用waitpid监控该线程"
                    },
                    {
                      "title": "一个子线程退出并不是发送特殊的信号给主线程,当所有的子线程都推出时,才会发送SIGCHILD信号"
                    },
                    {
                      "title": "pthread_join",
                      "topics": [
                        {
                          "title": "一个线程通过监测某一个线程ctid (线程id的存储地址),得到ctid变化的通知"
                        },
                        {
                          "title": "线程退出时,会修改该位置, 并通知其他其他线程wake. 解除阻塞"
                        }
                      ]
                    }
                  ]
                },
                {
                  "title": "线程和进程",
                  "topics": [
                    {
                      "title": "只是对资源的共享程度不同而已"
                    }
                  ]
                },
                {
                  "title": "可共享同一挂载地址空间.",
                  "topics": [
                    {
                      "title": "linux支持为每一个进程设置根目录地址"
                    }
                  ]
                },
                {
                  "title": "控制终端"
                },
                {
                  "title": "nice,errno, 实时调度策略, 优先级, cpu亲和力"
                }
              ]
            }
          ]
        },
        {
          "title": "线程局部变量",
          "topics": [
            {
              "title": "变量声明中有__thread .",
              "topics": [
                {
                  "title": "static __thread buf[MAX_LEN]"
                },
                {
                  "title": "需要linux内核, 线程库, (NPTL), C编译器同时支持.(否则无法实现)"
                },
                {
                  "title": "errno就是使用了线程本地存储"
                }
              ]
            }
          ]
        },
        {
          "title": "多进程&多线程",
          "topics": [
            {
              "title": "fork",
              "topics": [
                {
                  "title": "需要拷贝内存页表, 文件描述符表"
                },
                {
                  "title": "线程clone不需要管这些"
                }
              ]
            },
            {
              "title": "线程比进程创建快速十倍"
            }
          ]
        }
      ]
    },
    "structure": "org.xmind.ui.map.clockwise"
  }
]