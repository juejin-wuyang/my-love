[
  {
    "title": "画布 1",
    "topic": {
      "title": "进程管理",
      "topics": [
        {
          "title": "swapper进程",
          "topics": [
            {
              "title": "所有进程的祖先叫做进程0 ，idle 进程或因为历史的原因叫做swapper 进程"
            },
            {
              "title": "多处理器系统中，每个CPU都有一个进程0，主要打开机器电源，计算机的BIOS就启动一个CPU，同时禁用其他CPU。运行的CPU 上的swapper进程初初始化内核数据结构，然后激活其他的并且使用copy_process()函数创建另外的swapper进程，把0 传递给新创建的swapper进程作为他们进程的PID"
            },
            {
              "title": "由进程0创建的内核线程执行init() 函数，init() 一次完成内核的初始化。init()调用execve()系统调用装入可执行程序init ，结果 ，init 内核线程变成一个普通的进程，且拥有自己的每个进程内核数据结构。在系统关闭之前，init 进程一直存活，因为它创建和监控在操作系统外层执行的所有进程的活动"
            },
            {
              "title": "init进程是其他进程的父进程"
            },
            {
              "title": "不执行其他动作, 当没没有执行进程时,负责让cpu休眠."
            },
            {
              "title": "会根据中断进行调度执行"
            }
          ]
        },
        {
          "title": "调度算法变更",
          "topics": [
            {
              "title": "2.4 O(N)版本",
              "topics": [
                {
                  "title": "所有的资源共享一个任务的 runqueue"
                },
                {
                  "title": "对于当前执行完的 process，需要把所有在 expired queue 中的 process 过一遍，找到合适的位置插入。"
                },
                {
                  "title": "这不仅仅会带来性能上的巨大损失，还使得系统的调度时间非常不确定 —— 根据系统的负载，可能有数倍甚至数百倍的差异。我们知道，不确定性是软件系统的大敌，尤其是实时系统。"
                },
                {
                  "title": "scheduler 维护两个 queue：runqueue 和 expired queue。两个 queue 都永远保持有序，一个 process 用完时间片，就会被插入 expired queue；当 runqueue 为空时，只需要把 runqueue 和 expired queue 交换一下即可",
                  "topics": [
                    {
                      "title": "插入速度O(n) 因为是链表"
                    }
                  ]
                }
              ]
            },
            {
              "title": "O(1)算法",
              "topics": [
                {
                  "title": "linux定义了140个优先级, 创建长度140的数组, 元素是FIFO 先入先出队列. 每个队列的元素都是相同优先级的进程."
                },
                {
                  "title": "为了O(1)找到待运行进程, 避免每次寻找最高优先级进程时, 遍历140长度的链表. 使用bitarray, 1标记为队列有元素, 0为空.cpu可很快找到第一个为1的长度"
                },
                {
                  "title": "基本过程",
                  "topics": [
                    {
                      "title": "在 active bitarray 里，寻找 left-most bit 的位置 x。"
                    },
                    {
                      "title": "在 active priority array（APA）中，找到对应队列 APA[x]。"
                    },
                    {
                      "title": "从 APA[x] 中 dequeue 一个 process，dequeue 后，如果 APA[x] 的 queue 为空，那么将 active bitarray 里第 x bit置为 0。"
                    },
                    {
                      "title": "对于当前执行完的 process，重新计算其 priority，然后 enqueue 到 expired priority array（EPA）相应的队里 EPA[priority]。"
                    },
                    {
                      "title": "如果 priority 在 expired bitarray 里对应的 bit 为 0，将其置 1。"
                    },
                    {
                      "title": "如果 active bitarray 全为零，将 active bitarray 和 expired bitarray 交换一下。"
                    },
                    {
                      "title": "结论: 
1. 每个时间片运行完, 要等下一轮才可以运行(不太友好)
2.在调度完要重新计算(可能根本不计算, 或者用户态系统调用修改了),然后放到具体的优先级 FIFO队列
3.无论使用什么调度程序,都会被分配到一个优先级.
4.如果时间片没有被用完主动放弃,或者被抢占则放入到runqueue",
                      "makers": [
                        "priority-1",
                        "task-done"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "title": "CFS调度器	",
              "topics": [
                {
                  "title": "优势",
                  "topics": [
                    {
                      "title": "避免进程饥饿",
                      "topics": [
                        {
                          "title": "O(1)调度器中，进程会饥饿，为何会饥饿，第一受到系统进程数量的影响，因为时间片的分配是固定的，，如果系统进程数量很多的话，就会导致进入过期队列的即使很高优先级的进程饥饿，毕竟低优先级的进程还要处理"
                        },
                        {
                          "title": "优先级调整以及交互进程判断，交互进程可以不进入过期队列，这样就会造成过期队列的进程饥饿，索性linux调度器引入了一个饥饿检测机制，从标而不是本上解决了这一个问题"
                        }
                      ]
                    },
                    {
                      "title": "cfs调度器的运行时间是0(logN)",
                      "topics": [
                        {
                          "title": "但是比O(1)慢"
                        }
                      ]
                    },
                    {
                      "title": "I/O 密集型任务的虚拟运行时间最终将会小于 CPU 密集型任务的，从而使得 I/O 密集型任务具有更高的优先级。这时，如果 CPU 密集型任务在运行，而 I/O 密集型任务变得有资格可以运行（如该任务所等待的 I/O 已成为可用)，那么 I/O 密集型任务就会抢占 CPU 密集型任务"
                    }
                  ]
                },
                {
                  "title": "概述",
                  "topics": [
                    {
                      "title": "cfs抛弃了时间片，采用了平滑的机制，用互相追赶的方式促使所有的进程一起向前走,保证任何进程都不会被耽搁太久",
                      "makers": [
                        "priority-1",
                        "task-done"
                      ]
                    },
                    {
                      "title": "几个概念",
                      "topics": [
                        {
                          "title": "分配给进程的时间 = 总的cpu时间 * 进程的权重/就绪队列（runqueue）所有进程权重之和",
                          "topics": [
                            {
                              "title": "nice值和权重之间可以互相转换"
                            },
                            {
                              "title": "nice=0的权重是1024"
                            },
                            {
                              "title": "[Image]"
                            }
                          ]
                        },
                        {
                          "title": "调度周期",
                          "topics": [
                            {
                              "title": "cfs保证调度周期内每个就绪进程都得到运行"
                            },
                            {
                              "title": "当就绪列表<=8时, 则调度周期为6ms"
                            },
                            {
                              "title": "当大于8时, 这个值根据就绪列表大小, 及最小粒度运行时间得出调度周期"
                            }
                          ]
                        },
                        {
                          "title": "最小粒度运行时间",
                          "topics": [
                            {
                              "title": "为了避免进程调度过于频繁,会保证每个进程每次占用cpu都会有最小的运行时间.(除非主动让出cpu)"
                            },
                            {
                              "title": "默认时间是0.75ms",
                              "topics": [
                                {
                                  "title": "0.75* 8=6ms"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "title": "虚拟时间（virtual time）",
                          "topics": [
                            {
                              "title": "每个就绪进程会根据不同的优先级 设置不同的cpu运行时间. 而虚拟时间是并不是指这个运行时间, 而是 虚拟时间✖️权重大小. "
                            },
                            {
                              "title": "vruntime = 实际运行时间 * 1024 / 进程权重 ",
                              "topics": [
                                {
                                  "title": "保证vruntime是每个进程的相对运行时间. 不同进程由于不同优先级,设置不同的增长速度, 当vruntime相等时,实际运行时间其实是不同的.所以保证了优先级高的,运行时间长. "
                                }
                              ]
                            },
                            {
                              "title": "系统调度周期的末尾，所有进程的虚拟时钟vruntime得到归一"
                            }
                          ]
                        },
                        {
                          "title": "就绪队列（runqueue）",
                          "topics": [
                            {
                              "title": "每个CPU都会有一个全局的就绪队列"
                            }
                          ]
                        },
                        {
                          "title": "红黑树",
                          "topics": [
                            {
                              "title": "CFS维护了一个按照虚拟时间排序的红黑树",
                              "topics": [
                                {
                                  "title": "[Image]"
                                }
                              ]
                            },
                            {
                              "title": "CFS选择红黑树最左边的进程运行。随着系统时间的推移，原来左边运行过的进程慢慢的会移动到红黑树的右边，原来右边的进程也会最终跑到最左边。因此红黑树中的每个进程都有机会运行"
                            },
                            {
                              "title": "I/O 密集型任务的虚拟运行时间最终将会小于 CPU 密集型任务的，从而使得 I/O 密集型任务具有更高的优先级。这时，如果 CPU 密集型任务在运行，而 I/O 密集型任务变得有资格可以运行（如该任务所等待的 I/O 已成为可用)，那么 I/O 密集型任务就会抢占 CPU 密集型任务"
                            },
                            {
                              "title": "最左侧节点一定是下一个待运行的任务",
                              "topics": [
                                {
                                  "title": "会被缓存"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "title": "tick中断",
                          "topics": [
                            {
                              "title": "tick中断更新调度信息，调整当前进程在红黑树中的位置，调整完成后如果当前进程不是最左边的叶子节点（vruntime最小），就标记为需要调度。中断返回时就会调用schedule()来完成进程切换。否则当前进程继续执行。"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "title": "几个问题",
                      "topics": [
                        {
                          "title": "何时更新红黑树",
                          "topics": [
                            {
                              "title": "通过tick中断.tick中断时硬件中断.cpu会立即响应(执行完一个指令). 然后中断处理函数中,执行红黑树更新"
                            }
                          ]
                        },
                        {
                          "title": "，那么怎么区分不同优先级的进程呢",
                          "topics": [
                            {
                              "title": "使用优先级定义不同的时间增长策略"
                            }
                          ]
                        },
                        {
                          "title": "新进程的vruntime的初值是不是0啊？",
                          "topics": [
                            {
                              "title": "每个CPU的运行队列cfs_rq都维护一个min_vruntime字段，记录该运行队列中所有进程的vruntime最小值，新进程的初始vruntime值就以它所在运行队列的min_vruntime为基础来设置，与老进程保持在合理的差距范围内"
                            }
                          ]
                        },
                        {
                          "title": "休眠进程的vruntime一直保持不变吗？",
                          "topics": [
                            {
                              "title": "如果休眠进程的 vruntime 保持不变，而其他运行进程的 vruntime 一直在推进，那么等到休眠进程终于唤醒的时候，它的vruntime比别人小很多，会使它获得长时间抢占CPU的优势，其他进程就要饿死了。这显然是另一种形式的不公平。CFS是这样做的：在休眠进程被唤醒时重新设置vruntime值，以min_vruntime值为基础，给予一定的补偿，但不能补偿太多。"
                            }
                          ]
                        },
                        {
                          "title": "休眠进程在唤醒时会立刻抢占CPU吗？",
                          "topics": [
                            {
                              "title": "由于休眠进程在唤醒时会获得vruntime的补偿，所以它在醒来的时候有能力抢占CPU是大概率事件，这也是CFS调度算法的本意，即保证交互式进程的响应速度，因为交互式进程等待用户输入会频繁休眠。除了交互式进程以外，主动休眠的进程同样也会在唤醒时获得补偿，例如通过调用sleep()、nanosleep()的方式，定时醒来完成特定任务，这类进程往往并不要求快速响应，但是CFS不会把它们与交互式进程区分开来，它们同样也会在每次唤醒时获得vruntime补偿，这有可能会导致其它更重要的应用进程被抢占，有损整体性能。"
                            },
                            {
                              "title": "禁用唤醒抢占 特性之后，刚唤醒的进程不会立即抢占运行中的进程，而是要等到运行进程用完时间片之后。在以上案例中，经过这样的调整之后B进程被抢占的频率大大降低了，整体性能得到了改善"
                            },
                            {
                              "title": "sched_wakeup_granularity_ns"
                            },
                            {
                              "title": "这个参数限定了一个唤醒进程要抢占当前进程之前必须满足的条件：只有当该唤醒进程的vruntime比当前进程的vruntime小、并且两者差距(vdiff)大于sched_wakeup_granularity_ns的情况下，才可以抢占，否则不可以。这个参数越大，发生唤醒抢占就越不容易。"
                            },
                            {
                              "title": "如果唤醒抢占不频繁,可以不用修改"
                            }
                          ]
                        },
                        {
                          "title": "进程从一个CPU迁移到另一个CPU上的时候vruntime会不会变？",
                          "topics": [
                            {
                              "title": "在多CPU的系统上，不同的CPU的负载不一样，有的CPU更忙一些，而每个CPU都有自己的运行队列，每个队列中的进程的vruntime也走得有快有慢"
                            },
                            {
                              "title": "当进程从一个CPU的运行队列中出来 (dequeue_entity) 的时候，它的vruntime要减去队列的min_vruntime值；而当进程加入另一个CPU的运行队列 ( enqueue_entiry) 时，它的vruntime要加上该队列的min_vruntime值。这样，进程从一个CPU迁移到另一个CPU之后，vruntime保持相对公平"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "title": "问题",
          "topics": [
            {
              "title": "实时进程如果一直就绪, 是否非实时进程会被饿死",
              "topics": [
                {
                  "title": "在以sched_rt_period_us为一个周期的时间内，所有实时进程的运行时间之和不超过sched_rt_runtime_us。
这两个文件的默认值是1s和0.95s，表示每秒种为一个周期，在这个周期中，所有实时进程运行的总时间不超过0.95秒，剩下的至少0.05秒会留给普通进程。
也就是说，实时进程占有不超过95%的CPU。而在这两个文件出现之前，实时进程的运行时间是没有限制的"
                },
                {
                  "title": "总结",
                  "makers": [
                    "priority-1"
                  ],
                  "topics": [
                    {
                      "title": "实时进程可以高优先级抢占以保证高的响应速度, 但是不代表它可以霸占CPU ,一直处于就绪状态,不执行IO,不主动放弃cpu"
                    }
                  ]
                }
              ]
            },
            {
              "title": "更高优先级进程到来,如何实现抢占cpu",
              "topics": [
                {
                  "title": "通过tick中断"
                }
              ]
            },
            {
              "title": "主动调度返回时,在哪里",
              "topics": [
                {
                  "title": "linux schedule, 方法主动触发调度, 函数返回时, 就是重新获得执行权之时,该方法会放弃cpu.触发上下文切换."
                }
              ]
            },
            {
              "title": "cpu的三态",
              "topics": [
                {
                  "title": "一般来说，CPU在任何时刻都处于以下三种情况之一："
                },
                {
                  "title": "运行于用户空间，执行用户进程"
                },
                {
                  "title": "运行于内核空间，处于进程上下文"
                },
                {
                  "title": "运行于内核空间，处于中断上下文"
                }
              ]
            }
          ]
        },
        {
          "title": "进程状态",
          "topics": [
            {
              "title": "TASK_RUNNING：进程当前正在运行，或者正在运行队列中等待调度。"
            },
            {
              "title": "TASK_INTERRUPTIBLE：进程处于睡眠状态，正在等待某些事件发生。进程可以被信号中断。接收到信号或被显式的唤醒呼叫唤醒之后，进程将转变为 TASK_RUNNING 状态。"
            },
            {
              "title": "TASK_UNINTERRUPTIBLE：此进程状态类似于 TASK_INTERRUPTIBLE，只是它不会处理信号。中断处于这种状态的进程是不合适的，因为它可能正在完成某些重要的任务。 当它所等待的事件发生时，进程将被显式的唤醒呼叫唤醒。"
            },
            {
              "title": "TASK_STOPPED：进程已中止执行，它没有运行，并且不能运行。接收到 SIGSTOP 和 SIGTSTP 等信号时，进程将进入这种状态。接收到 SIGCONT 信号之后，进程将再次变得可运行。"
            },
            {
              "title": "TASK_TRACED：正被调试程序等其他进程监控时，进程将进入这种状态。"
            },
            {
              "title": "EXIT_ZOMBIE：进程已终止，它正等待其父进程收集关于它的一些统计信息。"
            },
            {
              "title": "EXIT_DEAD：最终状态（正如其名）。将进程从系统中删除时，它将进入此状态，因为其父进程已经通过 wait4() 或 waitpid() 调用收集了所有统计信息。"
            },
            {
              "title": "TASK_KILLABLE",
              "topics": [
                {
                  "title": "可被kill终止,但是不会响应其他信号, 该状态进程处于休眠状态"
                }
              ]
            },
            {
              "title": "可以使用wake_up_interruptable 唤醒可中断进程"
            },
            {
              "title": "TASK_UNINTERRUPTIBLE状态存在的意义就在于，内核的某些处理流程是不能被打断的。如果响应异步信号，程序的执行流程中就会被插入一段用于处理异步信号的流程（这个插入的流程可能只存在于内核态，也可能延伸到用户态），于是原有的流程就被中断了。（参见《linux内核异步中断浅析》）"
            },
            {
              "title": "在进程对某些硬件进行操作时（比如进程调用read系统调用对某个设备文件进行读操作，而read系统调用最终执行到对应设备驱动的代码，并与对应的物理设备进行交互），可能需要使用TASK_UNINTERRUPTIBLE状态对进程进行保护，以避免进程与设备交互的过程被打断，造成设备陷入不可控的状态。这种情况下的TASK_UNINTERRUPTIBLE状态总是非常短暂的，通过ps命令基本上不可能捕捉到。"
            },
            {
              "title": "某些设备访问代码执行前,会将进程设置到UNININTERRUPTIBLE"
            }
          ]
        },
        {
          "title": "实时进程调度策略",
          "topics": [
            {
              "title": "在多个实时进程之间，优先级更高的会抢先运行"
            },
            {
              "title": "优先级相同的实时进程之间，不会互相抢占，只能等对方主动释放CPU,或者时钟中断触发调度程序剥夺其cpu"
            },
            {
              "title": "FIFO",
              "topics": [
                {
                  "title": "CHED_FIFO调度策略的特点是，进程会一直保持运行直到发生以下情况之一："
                },
                {
                  "title": "进程主动调用sched_yield(2)放弃运行，自动排到运行队列的队尾，等到相同优先级的其它进程运行之后才有机会再运行；"
                },
                {
                  "title": "进程进入睡眠状态（比如由于等待I/O的原因），唤醒后自动排到运行队列的队尾，等到相同优先级的其它进程运行之后才有机会再运行；"
                },
                {
                  "title": "被优先级更高的实时进程抢占，这种情况下会自动排到运行队列的队首，下次运行的机会排在相同优先级的其它进程的前面。"
                },
                {
                  "title": "只要是主动退出或时间片到了都会被放到队尾,被高优先级抢占放到队首部",
                  "makers": [
                    "priority-1",
                    "task-done"
                  ]
                },
                {
                  "title": "猜测 如果因为实时进程触发了最大的时间片(95%的时间), 内核可能是提高非实时进程优先级, 从而实现抢占, 这样 当前实时进程还是被放到队首, 所以FIFO可能会饿死其他实时进程,包括同级别的. RR可能不会饿死同级别的实时进程",
                  "makers": [
                    "priority-1",
                    "task-done"
                  ],
                  "topics": [
                    {
                      "title": "即使非实时进程不会被饿死,但是实时进程可能被饿死"
                    },
                    {
                      "title": "linux并不会提高优先级, 而是使用vruntime,由于非实时进程执行时间短,而被选中, 参考cfs算法"
                    }
                  ]
                }
              ]
            },
            {
              "title": "RR",
              "topics": [
                {
                  "title": "SCHED_RR进程与SCHED_FIFO唯一不同的是，实时进程的运行时间是分为一段一段的，在相同优先级的进程之间轮流运行，每个进程运行完一个时间段之后，必须让给下一个进程（强调：仅对相同优先级而言，不同优先级的进程之间仍然会互相抢占）。"
                },
                {
                  "title": "Round robin",
                  "topics": [
                    {
                      "title": "轮转"
                    }
                  ]
                }
              ]
            },
            {
              "title": "other",
              "topics": [
                {
                  "title": "OTHER则是在所有不同优先级的进程间引入时间片轮转机制，所有优先级的进程根据优先级的高低进行分时运行，通过动态调整进程优先级使所有进程都有运行机会，在OTHER调度中就存在低优先级抢占高优先级进程（静态优先级）的情况。"
                }
              ]
            },
            {
              "title": "多核cpu之间负载均衡",
              "makers": [
                "task-done",
                "priority-1",
                "symbol-question"
              ],
              "topics": [
                {
                  "title": "CPU负载平衡有两种方式：pull和push，即空闲CPU从其他忙的CPU队列中拉一个进程到当前CPU队列；或者忙的CPU队列将一个进程推送到空闲的CPU队列中。idle_balance干的则是pull的事情，具体push下面会提到。"
                },
                {
                  "title": "开关代表如果CPU队列空闲了500us（sysctl_sched_migration_cost默认值）以上，则进行pull，否则则返回"
                },
                {
                  "title": "系统中每个CPU都会有一个全局的就绪队列,每个就绪队列其实就是个优先级队列"
                }
              ]
            }
          ]
        },
        {
          "title": "进程调度优先级",
          "topics": [
            {
              "title": "内核使用一些简单的数值范围0~139表示内部优先级, 数值越低, 优先级越高。"
            },
            {
              "title": "从0~99的范围专供实时进程使用, nice的值[-20,19]则映射到范围100~139"
            },
            {
              "title": "[Image]",
              "topics": [
                {
                  "title": "[Image]"
                }
              ]
            },
            {
              "title": "[Image]"
            },
            {
              "title": "和O(1)描述的140个优先级数组一样"
            },
            {
              "title": "静态优先级static_prio(普通进程)和实时优先级rt_priority(实时进程)是计算的起点 因此他们也是进程创建的时候设定好的, 我们通过nice修改的就是普通进程的静态优先级static_prio"
            },
            {
              "title": "如何计算prio 动态优先级",
              "topics": [
                {
                  "title": "[Image]"
                },
                {
                  "title": "所以实时进程的rt优先级越大, 动态优先级越低"
                },
                {
                  "title": "调度器会考虑的优先级则保存在prio. 由于在某些情况下内核需要暂时提高进程的优先级, 因此需要用prio表示. 由于这些改变不是持久的, 因此静态优先级static_prio和普通优先级normal_prio不受影响. "
                },
                {
                  "title": "此外还用了一个字段rt_priority保存了实时进程的优先级静态优先级static_prio(普通进程)和实时优先级rt_priority(实时进程)是计算的起点, 通过他们计算进程的普通优先级normal_prio和动态优先级prio."
                },
                {
                  "title": "非实时进程就是static_prio, 和normal,  实时进程就是rt_priority, 最终调度器类使用prio来作为优先级"
                }
              ]
            }
          ]
        },
        {
          "title": "调度器组成",
          "topics": [
            {
              "title": "主调度器",
              "topics": [
                {
                  "title": "直接的, 比如进程打算睡眠或出于其他原因放弃CPU 而触发调度"
                }
              ]
            },
            {
              "title": "周期性调度器",
              "topics": [
                {
                  "title": "通过周期性的机制, 以固定的频率运行, 不时的检测是否有必要"
                }
              ]
            },
            {
              "title": "6个调度策略",
              "topics": [
                {
                  "title": "SCHED_NORMAL和SCHED_BATCH调度普通的非实时进程"
                },
                {
                  "title": "SCHED_FIFO和SCHED_RR和SCHED_DEADLINE则采用不同的调度策略调度实时进程"
                },
                {
                  "title": "SCHED_IDLE则在系统空闲时调用idle进"
                }
              ]
            },
            {
              "title": "5个调度器类",
              "topics": [
                {
                  "title": "(140个优先级, 不同优先级策略所在范围不同)"
                },
                {
                  "title": "优先级顺序
stop_sched_class -> dl_sched_class -> rt_sched_class -> fair_sched_class -> idle_sched_class"
                },
                {
                  "title": "每个进程都属于一个调度器类"
                },
                {
                  "title": "[Image]"
                }
              ]
            },
            {
              "title": "三个调度实体",
              "topics": [
                {
                  "title": "调度器不限于调度进程, 还可以调度更大的实体, 比如实现组调度"
                },
                {
                  "title": "sched_dl_entity 采用EDF算法调度的实时调度实体"
                },
                {
                  "title": "sched_rt_entity 采用Roound-Robin或者FIFO算法调度的实时调度实体 rt_sched_class"
                },
                {
                  "title": "sched_entity 采用CFS算法调度的普通非实时进程的调度实体",
                  "topics": [
                    {
                      "title": "fair"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "title": "调度管理目标",
          "topics": [
            {
              "title": "公平 – 调度算法必须是对相同优先级的每个进程公平公正
保证可以执行 – 调度不能出现问题，否则系统将崩溃
资源高效利用 – 尽可能要使得系统的所有部分忙碌
为衡量调度性能，我们常考虑一下几个指标：吞吐量、CPU利用率和周转时间，等待时间和响应时间。

吞吐量：系统每小时完成的作业数量
CPU利用率：CPU不闲置的时间百分比
周转时间：从一个作业提交时刻开始知道该作业完成时刻为止的时间
等待时间：作业从在就绪队列中的时间
相应时间：相应延迟
带权周转时间：周转时间/运行时间"
            }
          ]
        },
        {
          "title": "进程分类",
          "topics": [
            {
              "title": "交互式进程(interactive process)",
              "topics": [
                {
                  "title": "此类进程经常与用户进行交互, 因此需要花费很多时间等待键盘和鼠标操作. 当接受了用户的输入后, 进程必须很快被唤醒, 否则用户会感觉系统反应迟钝"
                }
              ]
            },
            {
              "title": "批处理进程(batch process)",
              "topics": [
                {
                  "title": "此类进程不必与用户交互, 因此经常在后台运行. 因为这样的进程不必很快相应, 因此常受到调度程序的怠慢	"
                }
              ]
            },
            {
              "title": "实时进程(real-time process)	",
              "topics": [
                {
                  "title": "这些进程由很强的调度需要, 这样的进程绝不会被低优先级的进程阻塞. 并且他们的响应时间要尽可能的短	"
                }
              ]
            },
            {
              "title": "linux可以显示的确认实时进程,但是无法群峰交互式进程和批处理进程"
            },
            {
              "title": "不同进程的调度策略同步",
              "topics": [
                {
                  "title": "实时进程值只要求尽可能快的被响应, 基于优先级, 每个进程根据它重要程度的不同被赋予不同的优先级，调度器在每次调度时, 总选择优先级最高的进程开始执行. 低优先级不可能抢占高优先级, 因此FIFO或者Round Robin的调度策略即可满足实时进程调度的需求."
                },
                {
                  "title": "普通进程的调度策略就比较麻烦了, 因为普通进程不能简单的只看优先级, 必须公平的占有CPU, 否则很容易出现进程饥饿, 这种情况下用户会感觉操作系统很卡, 响应总是很慢"
                }
              ]
            }
          ]
        }
      ]
    },
    "structure": "org.xmind.ui.map.unbalanced"
  }
]